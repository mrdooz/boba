// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect_settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "effect_settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace effect {

namespace {

const ::google::protobuf::Descriptor* Plexus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plexus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseEffector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseEffector_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_effect_5fsettings_2eproto() {
  protobuf_AddDesc_effect_5fsettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "effect_settings.proto");
  GOOGLE_CHECK(file != NULL);
  Plexus_descriptor_ = file->message_type(0);
  static const int Plexus_offsets_[1] = {
  };
  Plexus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plexus_descriptor_,
      Plexus::default_instance_,
      Plexus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plexus));
  TextPath_descriptor_ = file->message_type(1);
  static const int TextPath_offsets_[1] = {
  };
  TextPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextPath_descriptor_,
      TextPath::default_instance_,
      TextPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextPath));
  NoiseEffector_descriptor_ = file->message_type(2);
  static const int NoiseEffector_offsets_[1] = {
  };
  NoiseEffector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoiseEffector_descriptor_,
      NoiseEffector::default_instance_,
      NoiseEffector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoiseEffector));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_effect_5fsettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plexus_descriptor_, &Plexus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextPath_descriptor_, &TextPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoiseEffector_descriptor_, &NoiseEffector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_effect_5fsettings_2eproto() {
  delete Plexus::default_instance_;
  delete Plexus_reflection_;
  delete TextPath::default_instance_;
  delete TextPath_reflection_;
  delete NoiseEffector::default_instance_;
  delete NoiseEffector_reflection_;
}

void protobuf_AddDesc_effect_5fsettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025effect_settings.proto\022\006effect\"\010\n\006Plexu"
    "s\"\n\n\010TextPath\"\017\n\rNoiseEffector", 70);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "effect_settings.proto", &protobuf_RegisterTypes);
  Plexus::default_instance_ = new Plexus();
  TextPath::default_instance_ = new TextPath();
  NoiseEffector::default_instance_ = new NoiseEffector();
  Plexus::default_instance_->InitAsDefaultInstance();
  TextPath::default_instance_->InitAsDefaultInstance();
  NoiseEffector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_effect_5fsettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_effect_5fsettings_2eproto {
  StaticDescriptorInitializer_effect_5fsettings_2eproto() {
    protobuf_AddDesc_effect_5fsettings_2eproto();
  }
} static_descriptor_initializer_effect_5fsettings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Plexus::Plexus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plexus::InitAsDefaultInstance() {
}

Plexus::Plexus(const Plexus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plexus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plexus::~Plexus() {
  SharedDtor();
}

void Plexus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plexus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plexus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plexus_descriptor_;
}

const Plexus& Plexus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_2eproto();
  return *default_instance_;
}

Plexus* Plexus::default_instance_ = NULL;

Plexus* Plexus::New() const {
  return new Plexus;
}

void Plexus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plexus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Plexus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plexus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plexus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plexus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plexus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plexus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plexus::MergeFrom(const Plexus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plexus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plexus::CopyFrom(const Plexus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plexus::IsInitialized() const {

  return true;
}

void Plexus::Swap(Plexus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plexus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plexus_descriptor_;
  metadata.reflection = Plexus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TextPath::TextPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextPath::InitAsDefaultInstance() {
}

TextPath::TextPath(const TextPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextPath::~TextPath() {
  SharedDtor();
}

void TextPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TextPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextPath_descriptor_;
}

const TextPath& TextPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_2eproto();
  return *default_instance_;
}

TextPath* TextPath::default_instance_ = NULL;

TextPath* TextPath::New() const {
  return new TextPath;
}

void TextPath::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TextPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextPath::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextPath::MergeFrom(const TextPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextPath::CopyFrom(const TextPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPath::IsInitialized() const {

  return true;
}

void TextPath::Swap(TextPath* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextPath_descriptor_;
  metadata.reflection = TextPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoiseEffector::NoiseEffector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoiseEffector::InitAsDefaultInstance() {
}

NoiseEffector::NoiseEffector(const NoiseEffector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoiseEffector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseEffector::~NoiseEffector() {
  SharedDtor();
}

void NoiseEffector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoiseEffector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseEffector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseEffector_descriptor_;
}

const NoiseEffector& NoiseEffector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_2eproto();
  return *default_instance_;
}

NoiseEffector* NoiseEffector::default_instance_ = NULL;

NoiseEffector* NoiseEffector::New() const {
  return new NoiseEffector;
}

void NoiseEffector::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoiseEffector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NoiseEffector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoiseEffector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoiseEffector::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseEffector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoiseEffector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoiseEffector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoiseEffector::MergeFrom(const NoiseEffector& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoiseEffector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseEffector::CopyFrom(const NoiseEffector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseEffector::IsInitialized() const {

  return true;
}

void NoiseEffector::Swap(NoiseEffector* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoiseEffector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseEffector_descriptor_;
  metadata.reflection = NoiseEffector_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace effect

// @@protoc_insertion_point(global_scope)
