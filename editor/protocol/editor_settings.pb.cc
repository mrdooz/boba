// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "editor_settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace editor {

namespace {

const ::google::protobuf::Descriptor* Color4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Settings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_editor_5fsettings_2eproto() {
  protobuf_AddDesc_editor_5fsettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "editor_settings.proto");
  GOOGLE_CHECK(file != NULL);
  Color4_descriptor_ = file->message_type(0);
  static const int Color4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, a_),
  };
  Color4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Color4_descriptor_,
      Color4::default_instance_,
      Color4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Color4));
  Settings_descriptor_ = file->message_type(1);
  static const int Settings_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticker_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticker_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticks_per_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, module_view_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, module_row_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, default_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, selected_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, hover_row_color_),
  };
  Settings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settings_descriptor_,
      Settings::default_instance_,
      Settings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settings));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_editor_5fsettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Color4_descriptor_, &Color4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settings_descriptor_, &Settings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_editor_5fsettings_2eproto() {
  delete Color4::default_instance_;
  delete Color4_reflection_;
  delete Settings::default_instance_;
  delete Settings_reflection_;
}

void protobuf_AddDesc_editor_5fsettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025editor_settings.proto\022\006editor\"B\n\006Color"
    "4\022\014\n\001r\030\001 \001(\r:\0010\022\014\n\001g\030\002 \001(\r:\0010\022\014\n\001b\030\003 \001(\r"
    ":\0010\022\016\n\001a\030\004 \001(\r:\003255\"\240\002\n\010Settings\022\031\n\rtick"
    "er_height\030\001 \001(\r:\00250\022\033\n\017ticker_interval\030\002"
    " \001(\r:\00220\022\035\n\022ticks_per_interval\030\003 \001(\r:\0014\022"
    "\036\n\021module_view_width\030\004 \001(\r:\003200\022\035\n\021modul"
    "e_row_height\030\005 \001(\r:\00250\022)\n\021default_row_co"
    "lor\030d \001(\0132\016.editor.Color4\022*\n\022selected_ro"
    "w_color\030e \001(\0132\016.editor.Color4\022\'\n\017hover_r"
    "ow_color\030f \001(\0132\016.editor.Color4", 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "editor_settings.proto", &protobuf_RegisterTypes);
  Color4::default_instance_ = new Color4();
  Settings::default_instance_ = new Settings();
  Color4::default_instance_->InitAsDefaultInstance();
  Settings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_editor_5fsettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_editor_5fsettings_2eproto {
  StaticDescriptorInitializer_editor_5fsettings_2eproto() {
    protobuf_AddDesc_editor_5fsettings_2eproto();
  }
} static_descriptor_initializer_editor_5fsettings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Color4::kRFieldNumber;
const int Color4::kGFieldNumber;
const int Color4::kBFieldNumber;
const int Color4::kAFieldNumber;
#endif  // !_MSC_VER

Color4::Color4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Color4::InitAsDefaultInstance() {
}

Color4::Color4(const Color4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Color4::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  a_ = 255u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color4::~Color4() {
  SharedDtor();
}

void Color4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color4_descriptor_;
}

const Color4& Color4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fsettings_2eproto();
  return *default_instance_;
}

Color4* Color4::default_instance_ = NULL;

Color4* Color4::New() const {
  return new Color4;
}

void Color4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0u;
    g_ = 0u;
    b_ = 0u;
    a_ = 255u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Color4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 r = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // optional uint32 g = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // optional uint32 b = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_a;
        break;
      }

      // optional uint32 a = 4 [default = 255];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Color4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 r = 1 [default = 0];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // optional uint32 g = 2 [default = 0];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // optional uint32 b = 3 [default = 0];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  // optional uint32 a = 4 [default = 255];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Color4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 r = 1 [default = 0];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // optional uint32 g = 2 [default = 0];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // optional uint32 b = 3 [default = 0];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  // optional uint32 a = 4 [default = 255];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Color4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 r = 1 [default = 0];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 2 [default = 0];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 3 [default = 0];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

    // optional uint32 a = 4 [default = 255];
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Color4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Color4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color4::MergeFrom(const Color4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Color4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color4::CopyFrom(const Color4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color4::IsInitialized() const {

  return true;
}

void Color4::Swap(Color4* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Color4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color4_descriptor_;
  metadata.reflection = Color4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Settings::kTickerHeightFieldNumber;
const int Settings::kTickerIntervalFieldNumber;
const int Settings::kTicksPerIntervalFieldNumber;
const int Settings::kModuleViewWidthFieldNumber;
const int Settings::kModuleRowHeightFieldNumber;
const int Settings::kDefaultRowColorFieldNumber;
const int Settings::kSelectedRowColorFieldNumber;
const int Settings::kHoverRowColorFieldNumber;
#endif  // !_MSC_VER

Settings::Settings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Settings::InitAsDefaultInstance() {
  default_row_color_ = const_cast< ::editor::Color4*>(&::editor::Color4::default_instance());
  selected_row_color_ = const_cast< ::editor::Color4*>(&::editor::Color4::default_instance());
  hover_row_color_ = const_cast< ::editor::Color4*>(&::editor::Color4::default_instance());
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Settings::SharedCtor() {
  _cached_size_ = 0;
  ticker_height_ = 50u;
  ticker_interval_ = 20u;
  ticks_per_interval_ = 4u;
  module_view_width_ = 200u;
  module_row_height_ = 50u;
  default_row_color_ = NULL;
  selected_row_color_ = NULL;
  hover_row_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings::~Settings() {
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != default_instance_) {
    delete default_row_color_;
    delete selected_row_color_;
    delete hover_row_color_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_descriptor_;
}

const Settings& Settings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fsettings_2eproto();
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New() const {
  return new Settings;
}

void Settings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticker_height_ = 50u;
    ticker_interval_ = 20u;
    ticks_per_interval_ = 4u;
    module_view_width_ = 200u;
    module_row_height_ = 50u;
    if (has_default_row_color()) {
      if (default_row_color_ != NULL) default_row_color_->::editor::Color4::Clear();
    }
    if (has_selected_row_color()) {
      if (selected_row_color_ != NULL) selected_row_color_->::editor::Color4::Clear();
    }
    if (has_hover_row_color()) {
      if (hover_row_color_ != NULL) hover_row_color_->::editor::Color4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticker_height = 1 [default = 50];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticker_height_)));
          set_has_ticker_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ticker_interval;
        break;
      }

      // optional uint32 ticker_interval = 2 [default = 20];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticker_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticker_interval_)));
          set_has_ticker_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ticks_per_interval;
        break;
      }

      // optional uint32 ticks_per_interval = 3 [default = 4];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticks_per_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticks_per_interval_)));
          set_has_ticks_per_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_module_view_width;
        break;
      }

      // optional uint32 module_view_width = 4 [default = 200];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_view_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_view_width_)));
          set_has_module_view_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_module_row_height;
        break;
      }

      // optional uint32 module_row_height = 5 [default = 50];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_row_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_row_height_)));
          set_has_module_row_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_default_row_color;
        break;
      }

      // optional .editor.Color4 default_row_color = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_selected_row_color;
        break;
      }

      // optional .editor.Color4 selected_row_color = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_hover_row_color;
        break;
      }

      // optional .editor.Color4 hover_row_color = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hover_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hover_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ticker_height = 1 [default = 50];
  if (has_ticker_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticker_height(), output);
  }

  // optional uint32 ticker_interval = 2 [default = 20];
  if (has_ticker_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ticker_interval(), output);
  }

  // optional uint32 ticks_per_interval = 3 [default = 4];
  if (has_ticks_per_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ticks_per_interval(), output);
  }

  // optional uint32 module_view_width = 4 [default = 200];
  if (has_module_view_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->module_view_width(), output);
  }

  // optional uint32 module_row_height = 5 [default = 50];
  if (has_module_row_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->module_row_height(), output);
  }

  // optional .editor.Color4 default_row_color = 100;
  if (has_default_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->default_row_color(), output);
  }

  // optional .editor.Color4 selected_row_color = 101;
  if (has_selected_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->selected_row_color(), output);
  }

  // optional .editor.Color4 hover_row_color = 102;
  if (has_hover_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->hover_row_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Settings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ticker_height = 1 [default = 50];
  if (has_ticker_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticker_height(), target);
  }

  // optional uint32 ticker_interval = 2 [default = 20];
  if (has_ticker_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ticker_interval(), target);
  }

  // optional uint32 ticks_per_interval = 3 [default = 4];
  if (has_ticks_per_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ticks_per_interval(), target);
  }

  // optional uint32 module_view_width = 4 [default = 200];
  if (has_module_view_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->module_view_width(), target);
  }

  // optional uint32 module_row_height = 5 [default = 50];
  if (has_module_row_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->module_row_height(), target);
  }

  // optional .editor.Color4 default_row_color = 100;
  if (has_default_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->default_row_color(), target);
  }

  // optional .editor.Color4 selected_row_color = 101;
  if (has_selected_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->selected_row_color(), target);
  }

  // optional .editor.Color4 hover_row_color = 102;
  if (has_hover_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->hover_row_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Settings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ticker_height = 1 [default = 50];
    if (has_ticker_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticker_height());
    }

    // optional uint32 ticker_interval = 2 [default = 20];
    if (has_ticker_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticker_interval());
    }

    // optional uint32 ticks_per_interval = 3 [default = 4];
    if (has_ticks_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticks_per_interval());
    }

    // optional uint32 module_view_width = 4 [default = 200];
    if (has_module_view_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_view_width());
    }

    // optional uint32 module_row_height = 5 [default = 50];
    if (has_module_row_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_row_height());
    }

    // optional .editor.Color4 default_row_color = 100;
    if (has_default_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_row_color());
    }

    // optional .editor.Color4 selected_row_color = 101;
    if (has_selected_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected_row_color());
    }

    // optional .editor.Color4 hover_row_color = 102;
    if (has_hover_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hover_row_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticker_height()) {
      set_ticker_height(from.ticker_height());
    }
    if (from.has_ticker_interval()) {
      set_ticker_interval(from.ticker_interval());
    }
    if (from.has_ticks_per_interval()) {
      set_ticks_per_interval(from.ticks_per_interval());
    }
    if (from.has_module_view_width()) {
      set_module_view_width(from.module_view_width());
    }
    if (from.has_module_row_height()) {
      set_module_row_height(from.module_row_height());
    }
    if (from.has_default_row_color()) {
      mutable_default_row_color()->::editor::Color4::MergeFrom(from.default_row_color());
    }
    if (from.has_selected_row_color()) {
      mutable_selected_row_color()->::editor::Color4::MergeFrom(from.selected_row_color());
    }
    if (from.has_hover_row_color()) {
      mutable_hover_row_color()->::editor::Color4::MergeFrom(from.hover_row_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {

  return true;
}

void Settings::Swap(Settings* other) {
  if (other != this) {
    std::swap(ticker_height_, other->ticker_height_);
    std::swap(ticker_interval_, other->ticker_interval_);
    std::swap(ticks_per_interval_, other->ticks_per_interval_);
    std::swap(module_view_width_, other->module_view_width_);
    std::swap(module_row_height_, other->module_row_height_);
    std::swap(default_row_color_, other->default_row_color_);
    std::swap(selected_row_color_, other->selected_row_color_);
    std::swap(hover_row_color_, other->hover_row_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settings_descriptor_;
  metadata.reflection = Settings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace editor

// @@protoc_insertion_point(global_scope)
