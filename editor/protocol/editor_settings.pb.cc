// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "editor_settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace editor {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Settings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_editor_5fsettings_2eproto() {
  protobuf_AddDesc_editor_5fsettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "editor_settings.proto");
  GOOGLE_CHECK(file != NULL);
  Settings_descriptor_ = file->message_type(0);
  static const int Settings_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticker_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticker_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, ticks_per_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, effect_view_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, effect_row_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, status_bar_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, effect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, resize_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, timeline_zoom_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, timeline_zoom_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, timeline_zoom_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, default_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, selected_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, hover_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, invalid_hover_row_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, effect_icon_expanded_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, effect_icon_collapsed_color_),
  };
  Settings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settings_descriptor_,
      Settings::default_instance_,
      Settings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settings));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_editor_5fsettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settings_descriptor_, &Settings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_editor_5fsettings_2eproto() {
  delete Settings::default_instance_;
  delete Settings_reflection_;
}

void protobuf_AddDesc_editor_5fsettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025editor_settings.proto\022\017editor.protocol"
    "\032\014common.proto\"\252\005\n\010Settings\022\031\n\rticker_he"
    "ight\030\001 \001(\r:\00250\022\033\n\017ticker_interval\030\002 \001(\r:"
    "\00220\022\035\n\022ticks_per_interval\030\003 \001(\r:\0014\022\036\n\021ef"
    "fect_view_width\030\024 \001(\r:\003200\022\035\n\021effect_row"
    "_height\030\025 \001(\r:\00220\022\035\n\021status_bar_height\030\026"
    " \001(\r:\00230\022\031\n\reffect_height\030\036 \001(\r:\00240\022\030\n\rr"
    "esize_handle\030\037 \001(\r:\0016\022\035\n\021timeline_zoom_m"
    "in\030( \001(\r:\00216\022\037\n\021timeline_zoom_max\030) \001(\r:"
    "\0041024\022\"\n\025timeline_zoom_default\030* \001(\r:\00312"
    "8\0222\n\021default_row_color\030d \001(\0132\027.common.pr"
    "otocol.Color4\0223\n\022selected_row_color\030e \001("
    "\0132\027.common.protocol.Color4\0220\n\017hover_row_"
    "color\030f \001(\0132\027.common.protocol.Color4\0228\n\027"
    "invalid_hover_row_color\030g \001(\0132\027.common.p"
    "rotocol.Color4\022<\n\032effect_icon_expanded_c"
    "olor\030\310\001 \001(\0132\027.common.protocol.Color4\022=\n\033"
    "effect_icon_collapsed_color\030\311\001 \001(\0132\027.com"
    "mon.protocol.Color4", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "editor_settings.proto", &protobuf_RegisterTypes);
  Settings::default_instance_ = new Settings();
  Settings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_editor_5fsettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_editor_5fsettings_2eproto {
  StaticDescriptorInitializer_editor_5fsettings_2eproto() {
    protobuf_AddDesc_editor_5fsettings_2eproto();
  }
} static_descriptor_initializer_editor_5fsettings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Settings::kTickerHeightFieldNumber;
const int Settings::kTickerIntervalFieldNumber;
const int Settings::kTicksPerIntervalFieldNumber;
const int Settings::kEffectViewWidthFieldNumber;
const int Settings::kEffectRowHeightFieldNumber;
const int Settings::kStatusBarHeightFieldNumber;
const int Settings::kEffectHeightFieldNumber;
const int Settings::kResizeHandleFieldNumber;
const int Settings::kTimelineZoomMinFieldNumber;
const int Settings::kTimelineZoomMaxFieldNumber;
const int Settings::kTimelineZoomDefaultFieldNumber;
const int Settings::kDefaultRowColorFieldNumber;
const int Settings::kSelectedRowColorFieldNumber;
const int Settings::kHoverRowColorFieldNumber;
const int Settings::kInvalidHoverRowColorFieldNumber;
const int Settings::kEffectIconExpandedColorFieldNumber;
const int Settings::kEffectIconCollapsedColorFieldNumber;
#endif  // !_MSC_VER

Settings::Settings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Settings::InitAsDefaultInstance() {
  default_row_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
  selected_row_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
  hover_row_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
  invalid_hover_row_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
  effect_icon_expanded_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
  effect_icon_collapsed_color_ = const_cast< ::common::protocol::Color4*>(&::common::protocol::Color4::default_instance());
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Settings::SharedCtor() {
  _cached_size_ = 0;
  ticker_height_ = 50u;
  ticker_interval_ = 20u;
  ticks_per_interval_ = 4u;
  effect_view_width_ = 200u;
  effect_row_height_ = 20u;
  status_bar_height_ = 30u;
  effect_height_ = 40u;
  resize_handle_ = 6u;
  timeline_zoom_min_ = 16u;
  timeline_zoom_max_ = 1024u;
  timeline_zoom_default_ = 128u;
  default_row_color_ = NULL;
  selected_row_color_ = NULL;
  hover_row_color_ = NULL;
  invalid_hover_row_color_ = NULL;
  effect_icon_expanded_color_ = NULL;
  effect_icon_collapsed_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings::~Settings() {
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != default_instance_) {
    delete default_row_color_;
    delete selected_row_color_;
    delete hover_row_color_;
    delete invalid_hover_row_color_;
    delete effect_icon_expanded_color_;
    delete effect_icon_collapsed_color_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_descriptor_;
}

const Settings& Settings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fsettings_2eproto();
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New() const {
  return new Settings;
}

void Settings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticker_height_ = 50u;
    ticker_interval_ = 20u;
    ticks_per_interval_ = 4u;
    effect_view_width_ = 200u;
    effect_row_height_ = 20u;
    status_bar_height_ = 30u;
    effect_height_ = 40u;
    resize_handle_ = 6u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timeline_zoom_min_ = 16u;
    timeline_zoom_max_ = 1024u;
    timeline_zoom_default_ = 128u;
    if (has_default_row_color()) {
      if (default_row_color_ != NULL) default_row_color_->::common::protocol::Color4::Clear();
    }
    if (has_selected_row_color()) {
      if (selected_row_color_ != NULL) selected_row_color_->::common::protocol::Color4::Clear();
    }
    if (has_hover_row_color()) {
      if (hover_row_color_ != NULL) hover_row_color_->::common::protocol::Color4::Clear();
    }
    if (has_invalid_hover_row_color()) {
      if (invalid_hover_row_color_ != NULL) invalid_hover_row_color_->::common::protocol::Color4::Clear();
    }
    if (has_effect_icon_expanded_color()) {
      if (effect_icon_expanded_color_ != NULL) effect_icon_expanded_color_->::common::protocol::Color4::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_effect_icon_collapsed_color()) {
      if (effect_icon_collapsed_color_ != NULL) effect_icon_collapsed_color_->::common::protocol::Color4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticker_height = 1 [default = 50];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticker_height_)));
          set_has_ticker_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ticker_interval;
        break;
      }

      // optional uint32 ticker_interval = 2 [default = 20];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticker_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticker_interval_)));
          set_has_ticker_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ticks_per_interval;
        break;
      }

      // optional uint32 ticks_per_interval = 3 [default = 4];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticks_per_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticks_per_interval_)));
          set_has_ticks_per_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effect_view_width;
        break;
      }

      // optional uint32 effect_view_width = 20 [default = 200];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_view_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_view_width_)));
          set_has_effect_view_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_effect_row_height;
        break;
      }

      // optional uint32 effect_row_height = 21 [default = 20];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_row_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_row_height_)));
          set_has_effect_row_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_status_bar_height;
        break;
      }

      // optional uint32 status_bar_height = 22 [default = 30];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_bar_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_bar_height_)));
          set_has_status_bar_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_effect_height;
        break;
      }

      // optional uint32 effect_height = 30 [default = 40];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_height_)));
          set_has_effect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_resize_handle;
        break;
      }

      // optional uint32 resize_handle = 31 [default = 6];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resize_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resize_handle_)));
          set_has_resize_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_timeline_zoom_min;
        break;
      }

      // optional uint32 timeline_zoom_min = 40 [default = 16];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeline_zoom_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeline_zoom_min_)));
          set_has_timeline_zoom_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_timeline_zoom_max;
        break;
      }

      // optional uint32 timeline_zoom_max = 41 [default = 1024];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeline_zoom_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeline_zoom_max_)));
          set_has_timeline_zoom_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_timeline_zoom_default;
        break;
      }

      // optional uint32 timeline_zoom_default = 42 [default = 128];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeline_zoom_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeline_zoom_default_)));
          set_has_timeline_zoom_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_default_row_color;
        break;
      }

      // optional .common.protocol.Color4 default_row_color = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_selected_row_color;
        break;
      }

      // optional .common.protocol.Color4 selected_row_color = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_hover_row_color;
        break;
      }

      // optional .common.protocol.Color4 hover_row_color = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hover_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hover_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_invalid_hover_row_color;
        break;
      }

      // optional .common.protocol.Color4 invalid_hover_row_color = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalid_hover_row_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invalid_hover_row_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_effect_icon_expanded_color;
        break;
      }

      // optional .common.protocol.Color4 effect_icon_expanded_color = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_icon_expanded_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_icon_expanded_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_effect_icon_collapsed_color;
        break;
      }

      // optional .common.protocol.Color4 effect_icon_collapsed_color = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_icon_collapsed_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_icon_collapsed_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ticker_height = 1 [default = 50];
  if (has_ticker_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticker_height(), output);
  }

  // optional uint32 ticker_interval = 2 [default = 20];
  if (has_ticker_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ticker_interval(), output);
  }

  // optional uint32 ticks_per_interval = 3 [default = 4];
  if (has_ticks_per_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ticks_per_interval(), output);
  }

  // optional uint32 effect_view_width = 20 [default = 200];
  if (has_effect_view_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effect_view_width(), output);
  }

  // optional uint32 effect_row_height = 21 [default = 20];
  if (has_effect_row_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->effect_row_height(), output);
  }

  // optional uint32 status_bar_height = 22 [default = 30];
  if (has_status_bar_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->status_bar_height(), output);
  }

  // optional uint32 effect_height = 30 [default = 40];
  if (has_effect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->effect_height(), output);
  }

  // optional uint32 resize_handle = 31 [default = 6];
  if (has_resize_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->resize_handle(), output);
  }

  // optional uint32 timeline_zoom_min = 40 [default = 16];
  if (has_timeline_zoom_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->timeline_zoom_min(), output);
  }

  // optional uint32 timeline_zoom_max = 41 [default = 1024];
  if (has_timeline_zoom_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->timeline_zoom_max(), output);
  }

  // optional uint32 timeline_zoom_default = 42 [default = 128];
  if (has_timeline_zoom_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->timeline_zoom_default(), output);
  }

  // optional .common.protocol.Color4 default_row_color = 100;
  if (has_default_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->default_row_color(), output);
  }

  // optional .common.protocol.Color4 selected_row_color = 101;
  if (has_selected_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->selected_row_color(), output);
  }

  // optional .common.protocol.Color4 hover_row_color = 102;
  if (has_hover_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->hover_row_color(), output);
  }

  // optional .common.protocol.Color4 invalid_hover_row_color = 103;
  if (has_invalid_hover_row_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->invalid_hover_row_color(), output);
  }

  // optional .common.protocol.Color4 effect_icon_expanded_color = 200;
  if (has_effect_icon_expanded_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->effect_icon_expanded_color(), output);
  }

  // optional .common.protocol.Color4 effect_icon_collapsed_color = 201;
  if (has_effect_icon_collapsed_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->effect_icon_collapsed_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Settings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ticker_height = 1 [default = 50];
  if (has_ticker_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticker_height(), target);
  }

  // optional uint32 ticker_interval = 2 [default = 20];
  if (has_ticker_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ticker_interval(), target);
  }

  // optional uint32 ticks_per_interval = 3 [default = 4];
  if (has_ticks_per_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ticks_per_interval(), target);
  }

  // optional uint32 effect_view_width = 20 [default = 200];
  if (has_effect_view_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effect_view_width(), target);
  }

  // optional uint32 effect_row_height = 21 [default = 20];
  if (has_effect_row_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->effect_row_height(), target);
  }

  // optional uint32 status_bar_height = 22 [default = 30];
  if (has_status_bar_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->status_bar_height(), target);
  }

  // optional uint32 effect_height = 30 [default = 40];
  if (has_effect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->effect_height(), target);
  }

  // optional uint32 resize_handle = 31 [default = 6];
  if (has_resize_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->resize_handle(), target);
  }

  // optional uint32 timeline_zoom_min = 40 [default = 16];
  if (has_timeline_zoom_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->timeline_zoom_min(), target);
  }

  // optional uint32 timeline_zoom_max = 41 [default = 1024];
  if (has_timeline_zoom_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->timeline_zoom_max(), target);
  }

  // optional uint32 timeline_zoom_default = 42 [default = 128];
  if (has_timeline_zoom_default()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->timeline_zoom_default(), target);
  }

  // optional .common.protocol.Color4 default_row_color = 100;
  if (has_default_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->default_row_color(), target);
  }

  // optional .common.protocol.Color4 selected_row_color = 101;
  if (has_selected_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->selected_row_color(), target);
  }

  // optional .common.protocol.Color4 hover_row_color = 102;
  if (has_hover_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->hover_row_color(), target);
  }

  // optional .common.protocol.Color4 invalid_hover_row_color = 103;
  if (has_invalid_hover_row_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->invalid_hover_row_color(), target);
  }

  // optional .common.protocol.Color4 effect_icon_expanded_color = 200;
  if (has_effect_icon_expanded_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->effect_icon_expanded_color(), target);
  }

  // optional .common.protocol.Color4 effect_icon_collapsed_color = 201;
  if (has_effect_icon_collapsed_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->effect_icon_collapsed_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Settings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ticker_height = 1 [default = 50];
    if (has_ticker_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticker_height());
    }

    // optional uint32 ticker_interval = 2 [default = 20];
    if (has_ticker_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticker_interval());
    }

    // optional uint32 ticks_per_interval = 3 [default = 4];
    if (has_ticks_per_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticks_per_interval());
    }

    // optional uint32 effect_view_width = 20 [default = 200];
    if (has_effect_view_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_view_width());
    }

    // optional uint32 effect_row_height = 21 [default = 20];
    if (has_effect_row_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_row_height());
    }

    // optional uint32 status_bar_height = 22 [default = 30];
    if (has_status_bar_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_bar_height());
    }

    // optional uint32 effect_height = 30 [default = 40];
    if (has_effect_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_height());
    }

    // optional uint32 resize_handle = 31 [default = 6];
    if (has_resize_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resize_handle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 timeline_zoom_min = 40 [default = 16];
    if (has_timeline_zoom_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeline_zoom_min());
    }

    // optional uint32 timeline_zoom_max = 41 [default = 1024];
    if (has_timeline_zoom_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeline_zoom_max());
    }

    // optional uint32 timeline_zoom_default = 42 [default = 128];
    if (has_timeline_zoom_default()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeline_zoom_default());
    }

    // optional .common.protocol.Color4 default_row_color = 100;
    if (has_default_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_row_color());
    }

    // optional .common.protocol.Color4 selected_row_color = 101;
    if (has_selected_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected_row_color());
    }

    // optional .common.protocol.Color4 hover_row_color = 102;
    if (has_hover_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hover_row_color());
    }

    // optional .common.protocol.Color4 invalid_hover_row_color = 103;
    if (has_invalid_hover_row_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invalid_hover_row_color());
    }

    // optional .common.protocol.Color4 effect_icon_expanded_color = 200;
    if (has_effect_icon_expanded_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_icon_expanded_color());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .common.protocol.Color4 effect_icon_collapsed_color = 201;
    if (has_effect_icon_collapsed_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_icon_collapsed_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticker_height()) {
      set_ticker_height(from.ticker_height());
    }
    if (from.has_ticker_interval()) {
      set_ticker_interval(from.ticker_interval());
    }
    if (from.has_ticks_per_interval()) {
      set_ticks_per_interval(from.ticks_per_interval());
    }
    if (from.has_effect_view_width()) {
      set_effect_view_width(from.effect_view_width());
    }
    if (from.has_effect_row_height()) {
      set_effect_row_height(from.effect_row_height());
    }
    if (from.has_status_bar_height()) {
      set_status_bar_height(from.status_bar_height());
    }
    if (from.has_effect_height()) {
      set_effect_height(from.effect_height());
    }
    if (from.has_resize_handle()) {
      set_resize_handle(from.resize_handle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeline_zoom_min()) {
      set_timeline_zoom_min(from.timeline_zoom_min());
    }
    if (from.has_timeline_zoom_max()) {
      set_timeline_zoom_max(from.timeline_zoom_max());
    }
    if (from.has_timeline_zoom_default()) {
      set_timeline_zoom_default(from.timeline_zoom_default());
    }
    if (from.has_default_row_color()) {
      mutable_default_row_color()->::common::protocol::Color4::MergeFrom(from.default_row_color());
    }
    if (from.has_selected_row_color()) {
      mutable_selected_row_color()->::common::protocol::Color4::MergeFrom(from.selected_row_color());
    }
    if (from.has_hover_row_color()) {
      mutable_hover_row_color()->::common::protocol::Color4::MergeFrom(from.hover_row_color());
    }
    if (from.has_invalid_hover_row_color()) {
      mutable_invalid_hover_row_color()->::common::protocol::Color4::MergeFrom(from.invalid_hover_row_color());
    }
    if (from.has_effect_icon_expanded_color()) {
      mutable_effect_icon_expanded_color()->::common::protocol::Color4::MergeFrom(from.effect_icon_expanded_color());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_effect_icon_collapsed_color()) {
      mutable_effect_icon_collapsed_color()->::common::protocol::Color4::MergeFrom(from.effect_icon_collapsed_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {

  return true;
}

void Settings::Swap(Settings* other) {
  if (other != this) {
    std::swap(ticker_height_, other->ticker_height_);
    std::swap(ticker_interval_, other->ticker_interval_);
    std::swap(ticks_per_interval_, other->ticks_per_interval_);
    std::swap(effect_view_width_, other->effect_view_width_);
    std::swap(effect_row_height_, other->effect_row_height_);
    std::swap(status_bar_height_, other->status_bar_height_);
    std::swap(effect_height_, other->effect_height_);
    std::swap(resize_handle_, other->resize_handle_);
    std::swap(timeline_zoom_min_, other->timeline_zoom_min_);
    std::swap(timeline_zoom_max_, other->timeline_zoom_max_);
    std::swap(timeline_zoom_default_, other->timeline_zoom_default_);
    std::swap(default_row_color_, other->default_row_color_);
    std::swap(selected_row_color_, other->selected_row_color_);
    std::swap(hover_row_color_, other->hover_row_color_);
    std::swap(invalid_hover_row_color_, other->invalid_hover_row_color_);
    std::swap(effect_icon_expanded_color_, other->effect_icon_expanded_color_);
    std::swap(effect_icon_collapsed_color_, other->effect_icon_collapsed_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settings_descriptor_;
  metadata.reflection = Settings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace editor

// @@protoc_insertion_point(global_scope)
