// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect_settings_plexus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "effect_settings_plexus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace effect {
namespace plexus {

namespace {

const ::google::protobuf::Descriptor* PlexusConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlexusConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextPathConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextPathConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Displacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Displacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseEffectorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseEffectorConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NoiseEffectorConfig_ApplyTo_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_effect_5fsettings_5fplexus_2eproto() {
  protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "effect_settings_plexus.proto");
  GOOGLE_CHECK(file != NULL);
  PlexusConfig_descriptor_ = file->message_type(0);
  static const int PlexusConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlexusConfig, text_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlexusConfig, noise_effectors_),
  };
  PlexusConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlexusConfig_descriptor_,
      PlexusConfig::default_instance_,
      PlexusConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlexusConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlexusConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlexusConfig));
  TextPathConfig_descriptor_ = file->message_type(1);
  static const int TextPathConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPathConfig, text_),
  };
  TextPathConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextPathConfig_descriptor_,
      TextPathConfig::default_instance_,
      TextPathConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPathConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPathConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextPathConfig));
  Displacement_descriptor_ = file->message_type(2);
  static const int Displacement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Displacement, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Displacement, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Displacement, z_),
  };
  Displacement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Displacement_descriptor_,
      Displacement::default_instance_,
      Displacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Displacement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Displacement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Displacement));
  NoiseEffectorConfig_descriptor_ = file->message_type(3);
  static const int NoiseEffectorConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffectorConfig, apply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffectorConfig, displacement_),
  };
  NoiseEffectorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoiseEffectorConfig_descriptor_,
      NoiseEffectorConfig::default_instance_,
      NoiseEffectorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffectorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffectorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoiseEffectorConfig));
  NoiseEffectorConfig_ApplyTo_descriptor_ = NoiseEffectorConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_effect_5fsettings_5fplexus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlexusConfig_descriptor_, &PlexusConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextPathConfig_descriptor_, &TextPathConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Displacement_descriptor_, &Displacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoiseEffectorConfig_descriptor_, &NoiseEffectorConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_effect_5fsettings_5fplexus_2eproto() {
  delete PlexusConfig::default_instance_;
  delete PlexusConfig_reflection_;
  delete TextPathConfig::default_instance_;
  delete TextPathConfig_reflection_;
  delete Displacement::default_instance_;
  delete Displacement_reflection_;
  delete NoiseEffectorConfig::default_instance_;
  delete NoiseEffectorConfig_reflection_;
}

void protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034effect_settings_plexus.proto\022\026protocol"
    ".effect.plexus\032\014common.proto\"\220\001\n\014PlexusC"
    "onfig\022:\n\ntext_paths\030\001 \003(\0132&.protocol.eff"
    "ect.plexus.TextPathConfig\022D\n\017noise_effec"
    "tors\030\002 \003(\0132+.protocol.effect.plexus.Nois"
    "eEffectorConfig\"\036\n\016TextPathConfig\022\014\n\004tex"
    "t\030\001 \001(\t\"\203\001\n\014Displacement\022%\n\001x\030\001 \001(\0132\032.pr"
    "otocol.common.FloatAnim\022%\n\001y\030\002 \001(\0132\032.pro"
    "tocol.common.FloatAnim\022%\n\001z\030\003 \001(\0132\032.prot"
    "ocol.common.FloatAnim\"\306\001\n\023NoiseEffectorC"
    "onfig\022O\n\010apply_to\030\001 \001(\01623.protocol.effec"
    "t.plexus.NoiseEffectorConfig.ApplyTo:\010Po"
    "sition\022:\n\014displacement\030\002 \001(\0132$.protocol."
    "effect.plexus.Displacement\"\"\n\007ApplyTo\022\014\n"
    "\010Position\020\001\022\t\n\005Scale\020\002", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "effect_settings_plexus.proto", &protobuf_RegisterTypes);
  PlexusConfig::default_instance_ = new PlexusConfig();
  TextPathConfig::default_instance_ = new TextPathConfig();
  Displacement::default_instance_ = new Displacement();
  NoiseEffectorConfig::default_instance_ = new NoiseEffectorConfig();
  PlexusConfig::default_instance_->InitAsDefaultInstance();
  TextPathConfig::default_instance_->InitAsDefaultInstance();
  Displacement::default_instance_->InitAsDefaultInstance();
  NoiseEffectorConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_effect_5fsettings_5fplexus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_effect_5fsettings_5fplexus_2eproto {
  StaticDescriptorInitializer_effect_5fsettings_5fplexus_2eproto() {
    protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  }
} static_descriptor_initializer_effect_5fsettings_5fplexus_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlexusConfig::kTextPathsFieldNumber;
const int PlexusConfig::kNoiseEffectorsFieldNumber;
#endif  // !_MSC_VER

PlexusConfig::PlexusConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.effect.plexus.PlexusConfig)
}

void PlexusConfig::InitAsDefaultInstance() {
}

PlexusConfig::PlexusConfig(const PlexusConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.effect.plexus.PlexusConfig)
}

void PlexusConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlexusConfig::~PlexusConfig() {
  // @@protoc_insertion_point(destructor:protocol.effect.plexus.PlexusConfig)
  SharedDtor();
}

void PlexusConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlexusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlexusConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlexusConfig_descriptor_;
}

const PlexusConfig& PlexusConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

PlexusConfig* PlexusConfig::default_instance_ = NULL;

PlexusConfig* PlexusConfig::New() const {
  return new PlexusConfig;
}

void PlexusConfig::Clear() {
  text_paths_.Clear();
  noise_effectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlexusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.effect.plexus.PlexusConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.effect.plexus.TextPathConfig text_paths = 1;
      case 1: {
        if (tag == 10) {
         parse_text_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_text_paths;
        if (input->ExpectTag(18)) goto parse_noise_effectors;
        break;
      }

      // repeated .protocol.effect.plexus.NoiseEffectorConfig noise_effectors = 2;
      case 2: {
        if (tag == 18) {
         parse_noise_effectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noise_effectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_noise_effectors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.effect.plexus.PlexusConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.effect.plexus.PlexusConfig)
  return false;
#undef DO_
}

void PlexusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.effect.plexus.PlexusConfig)
  // repeated .protocol.effect.plexus.TextPathConfig text_paths = 1;
  for (int i = 0; i < this->text_paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text_paths(i), output);
  }

  // repeated .protocol.effect.plexus.NoiseEffectorConfig noise_effectors = 2;
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->noise_effectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.effect.plexus.PlexusConfig)
}

::google::protobuf::uint8* PlexusConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.effect.plexus.PlexusConfig)
  // repeated .protocol.effect.plexus.TextPathConfig text_paths = 1;
  for (int i = 0; i < this->text_paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->text_paths(i), target);
  }

  // repeated .protocol.effect.plexus.NoiseEffectorConfig noise_effectors = 2;
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->noise_effectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.effect.plexus.PlexusConfig)
  return target;
}

int PlexusConfig::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.effect.plexus.TextPathConfig text_paths = 1;
  total_size += 1 * this->text_paths_size();
  for (int i = 0; i < this->text_paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text_paths(i));
  }

  // repeated .protocol.effect.plexus.NoiseEffectorConfig noise_effectors = 2;
  total_size += 1 * this->noise_effectors_size();
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noise_effectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlexusConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlexusConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlexusConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlexusConfig::MergeFrom(const PlexusConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_paths_.MergeFrom(from.text_paths_);
  noise_effectors_.MergeFrom(from.noise_effectors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlexusConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlexusConfig::CopyFrom(const PlexusConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlexusConfig::IsInitialized() const {

  return true;
}

void PlexusConfig::Swap(PlexusConfig* other) {
  if (other != this) {
    text_paths_.Swap(&other->text_paths_);
    noise_effectors_.Swap(&other->noise_effectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlexusConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlexusConfig_descriptor_;
  metadata.reflection = PlexusConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextPathConfig::kTextFieldNumber;
#endif  // !_MSC_VER

TextPathConfig::TextPathConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.effect.plexus.TextPathConfig)
}

void TextPathConfig::InitAsDefaultInstance() {
}

TextPathConfig::TextPathConfig(const TextPathConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.effect.plexus.TextPathConfig)
}

void TextPathConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextPathConfig::~TextPathConfig() {
  // @@protoc_insertion_point(destructor:protocol.effect.plexus.TextPathConfig)
  SharedDtor();
}

void TextPathConfig::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TextPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextPathConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextPathConfig_descriptor_;
}

const TextPathConfig& TextPathConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

TextPathConfig* TextPathConfig::default_instance_ = NULL;

TextPathConfig* TextPathConfig::New() const {
  return new TextPathConfig;
}

void TextPathConfig::Clear() {
  if (has_text()) {
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.effect.plexus.TextPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.effect.plexus.TextPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.effect.plexus.TextPathConfig)
  return false;
#undef DO_
}

void TextPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.effect.plexus.TextPathConfig)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.effect.plexus.TextPathConfig)
}

::google::protobuf::uint8* TextPathConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.effect.plexus.TextPathConfig)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.effect.plexus.TextPathConfig)
  return target;
}

int TextPathConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextPathConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextPathConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextPathConfig::MergeFrom(const TextPathConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextPathConfig::CopyFrom(const TextPathConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPathConfig::IsInitialized() const {

  return true;
}

void TextPathConfig::Swap(TextPathConfig* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextPathConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextPathConfig_descriptor_;
  metadata.reflection = TextPathConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Displacement::kXFieldNumber;
const int Displacement::kYFieldNumber;
const int Displacement::kZFieldNumber;
#endif  // !_MSC_VER

Displacement::Displacement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.effect.plexus.Displacement)
}

void Displacement::InitAsDefaultInstance() {
  x_ = const_cast< ::protocol::common::FloatAnim*>(&::protocol::common::FloatAnim::default_instance());
  y_ = const_cast< ::protocol::common::FloatAnim*>(&::protocol::common::FloatAnim::default_instance());
  z_ = const_cast< ::protocol::common::FloatAnim*>(&::protocol::common::FloatAnim::default_instance());
}

Displacement::Displacement(const Displacement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.effect.plexus.Displacement)
}

void Displacement::SharedCtor() {
  _cached_size_ = 0;
  x_ = NULL;
  y_ = NULL;
  z_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Displacement::~Displacement() {
  // @@protoc_insertion_point(destructor:protocol.effect.plexus.Displacement)
  SharedDtor();
}

void Displacement::SharedDtor() {
  if (this != default_instance_) {
    delete x_;
    delete y_;
    delete z_;
  }
}

void Displacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Displacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Displacement_descriptor_;
}

const Displacement& Displacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

Displacement* Displacement::default_instance_ = NULL;

Displacement* Displacement::New() const {
  return new Displacement;
}

void Displacement::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_x()) {
      if (x_ != NULL) x_->::protocol::common::FloatAnim::Clear();
    }
    if (has_y()) {
      if (y_ != NULL) y_->::protocol::common::FloatAnim::Clear();
    }
    if (has_z()) {
      if (z_ != NULL) z_->::protocol::common::FloatAnim::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Displacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.effect.plexus.Displacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.common.FloatAnim x = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // optional .protocol.common.FloatAnim y = 2;
      case 2: {
        if (tag == 18) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_z;
        break;
      }

      // optional .protocol.common.FloatAnim z = 3;
      case 3: {
        if (tag == 26) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.effect.plexus.Displacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.effect.plexus.Displacement)
  return false;
#undef DO_
}

void Displacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.effect.plexus.Displacement)
  // optional .protocol.common.FloatAnim x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->x(), output);
  }

  // optional .protocol.common.FloatAnim y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->y(), output);
  }

  // optional .protocol.common.FloatAnim z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.effect.plexus.Displacement)
}

::google::protobuf::uint8* Displacement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.effect.plexus.Displacement)
  // optional .protocol.common.FloatAnim x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->x(), target);
  }

  // optional .protocol.common.FloatAnim y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->y(), target);
  }

  // optional .protocol.common.FloatAnim z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.effect.plexus.Displacement)
  return target;
}

int Displacement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.common.FloatAnim x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x());
    }

    // optional .protocol.common.FloatAnim y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }

    // optional .protocol.common.FloatAnim z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Displacement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Displacement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Displacement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Displacement::MergeFrom(const Displacement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      mutable_x()->::protocol::common::FloatAnim::MergeFrom(from.x());
    }
    if (from.has_y()) {
      mutable_y()->::protocol::common::FloatAnim::MergeFrom(from.y());
    }
    if (from.has_z()) {
      mutable_z()->::protocol::common::FloatAnim::MergeFrom(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Displacement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Displacement::CopyFrom(const Displacement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Displacement::IsInitialized() const {

  return true;
}

void Displacement::Swap(Displacement* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Displacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Displacement_descriptor_;
  metadata.reflection = Displacement_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NoiseEffectorConfig_ApplyTo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseEffectorConfig_ApplyTo_descriptor_;
}
bool NoiseEffectorConfig_ApplyTo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NoiseEffectorConfig_ApplyTo NoiseEffectorConfig::Position;
const NoiseEffectorConfig_ApplyTo NoiseEffectorConfig::Scale;
const NoiseEffectorConfig_ApplyTo NoiseEffectorConfig::ApplyTo_MIN;
const NoiseEffectorConfig_ApplyTo NoiseEffectorConfig::ApplyTo_MAX;
const int NoiseEffectorConfig::ApplyTo_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NoiseEffectorConfig::kApplyToFieldNumber;
const int NoiseEffectorConfig::kDisplacementFieldNumber;
#endif  // !_MSC_VER

NoiseEffectorConfig::NoiseEffectorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.effect.plexus.NoiseEffectorConfig)
}

void NoiseEffectorConfig::InitAsDefaultInstance() {
  displacement_ = const_cast< ::protocol::effect::plexus::Displacement*>(&::protocol::effect::plexus::Displacement::default_instance());
}

NoiseEffectorConfig::NoiseEffectorConfig(const NoiseEffectorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.effect.plexus.NoiseEffectorConfig)
}

void NoiseEffectorConfig::SharedCtor() {
  _cached_size_ = 0;
  apply_to_ = 1;
  displacement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseEffectorConfig::~NoiseEffectorConfig() {
  // @@protoc_insertion_point(destructor:protocol.effect.plexus.NoiseEffectorConfig)
  SharedDtor();
}

void NoiseEffectorConfig::SharedDtor() {
  if (this != default_instance_) {
    delete displacement_;
  }
}

void NoiseEffectorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseEffectorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseEffectorConfig_descriptor_;
}

const NoiseEffectorConfig& NoiseEffectorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

NoiseEffectorConfig* NoiseEffectorConfig::default_instance_ = NULL;

NoiseEffectorConfig* NoiseEffectorConfig::New() const {
  return new NoiseEffectorConfig;
}

void NoiseEffectorConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    apply_to_ = 1;
    if (has_displacement()) {
      if (displacement_ != NULL) displacement_->::protocol::effect::plexus::Displacement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoiseEffectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.effect.plexus.NoiseEffectorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.effect.plexus.NoiseEffectorConfig.ApplyTo apply_to = 1 [default = Position];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::effect::plexus::NoiseEffectorConfig_ApplyTo_IsValid(value)) {
            set_apply_to(static_cast< ::protocol::effect::plexus::NoiseEffectorConfig_ApplyTo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_displacement;
        break;
      }

      // optional .protocol.effect.plexus.Displacement displacement = 2;
      case 2: {
        if (tag == 18) {
         parse_displacement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_displacement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.effect.plexus.NoiseEffectorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.effect.plexus.NoiseEffectorConfig)
  return false;
#undef DO_
}

void NoiseEffectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.effect.plexus.NoiseEffectorConfig)
  // optional .protocol.effect.plexus.NoiseEffectorConfig.ApplyTo apply_to = 1 [default = Position];
  if (has_apply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->apply_to(), output);
  }

  // optional .protocol.effect.plexus.Displacement displacement = 2;
  if (has_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->displacement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.effect.plexus.NoiseEffectorConfig)
}

::google::protobuf::uint8* NoiseEffectorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.effect.plexus.NoiseEffectorConfig)
  // optional .protocol.effect.plexus.NoiseEffectorConfig.ApplyTo apply_to = 1 [default = Position];
  if (has_apply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->apply_to(), target);
  }

  // optional .protocol.effect.plexus.Displacement displacement = 2;
  if (has_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->displacement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.effect.plexus.NoiseEffectorConfig)
  return target;
}

int NoiseEffectorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.effect.plexus.NoiseEffectorConfig.ApplyTo apply_to = 1 [default = Position];
    if (has_apply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apply_to());
    }

    // optional .protocol.effect.plexus.Displacement displacement = 2;
    if (has_displacement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->displacement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseEffectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoiseEffectorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoiseEffectorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoiseEffectorConfig::MergeFrom(const NoiseEffectorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_to()) {
      set_apply_to(from.apply_to());
    }
    if (from.has_displacement()) {
      mutable_displacement()->::protocol::effect::plexus::Displacement::MergeFrom(from.displacement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoiseEffectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseEffectorConfig::CopyFrom(const NoiseEffectorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseEffectorConfig::IsInitialized() const {

  return true;
}

void NoiseEffectorConfig::Swap(NoiseEffectorConfig* other) {
  if (other != this) {
    std::swap(apply_to_, other->apply_to_);
    std::swap(displacement_, other->displacement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoiseEffectorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseEffectorConfig_descriptor_;
  metadata.reflection = NoiseEffectorConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plexus
}  // namespace effect
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
