// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect_settings_plexus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "effect_settings_plexus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace effect {
namespace plexus {

namespace {

const ::google::protobuf::Descriptor* Plexus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plexus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseEffector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseEffector_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NoiseEffector_ApplyTo_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_effect_5fsettings_5fplexus_2eproto() {
  protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "effect_settings_plexus.proto");
  GOOGLE_CHECK(file != NULL);
  Plexus_descriptor_ = file->message_type(0);
  static const int Plexus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, text_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, noise_effectors_),
  };
  Plexus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plexus_descriptor_,
      Plexus::default_instance_,
      Plexus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plexus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plexus));
  TextPath_descriptor_ = file->message_type(1);
  static const int TextPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPath, text_),
  };
  TextPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextPath_descriptor_,
      TextPath::default_instance_,
      TextPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextPath));
  NoiseEffector_descriptor_ = file->message_type(2);
  static const int NoiseEffector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, apply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, displacement_),
  };
  NoiseEffector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoiseEffector_descriptor_,
      NoiseEffector::default_instance_,
      NoiseEffector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseEffector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoiseEffector));
  NoiseEffector_ApplyTo_descriptor_ = NoiseEffector_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_effect_5fsettings_5fplexus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plexus_descriptor_, &Plexus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextPath_descriptor_, &TextPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoiseEffector_descriptor_, &NoiseEffector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_effect_5fsettings_5fplexus_2eproto() {
  delete Plexus::default_instance_;
  delete Plexus_reflection_;
  delete TextPath::default_instance_;
  delete TextPath_reflection_;
  delete NoiseEffector::default_instance_;
  delete NoiseEffector_reflection_;
}

void protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034effect_settings_plexus.proto\022\reffect.p"
    "lexus\032\014common.proto\"l\n\006Plexus\022+\n\ntext_pa"
    "ths\030\001 \003(\0132\027.effect.plexus.TextPath\0225\n\017no"
    "ise_effectors\030\002 \003(\0132\034.effect.plexus.Nois"
    "eEffector\"\030\n\010TextPath\022\014\n\004text\030\001 \001(\t\"\240\001\n\r"
    "NoiseEffector\022@\n\010apply_to\030\001 \001(\0162$.effect"
    ".plexus.NoiseEffector.ApplyTo:\010Position\022"
    ")\n\014displacement\030\002 \001(\0132\023.common.Vector3An"
    "im\"\"\n\007ApplyTo\022\014\n\010Position\020\001\022\t\n\005Scale\020\002", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "effect_settings_plexus.proto", &protobuf_RegisterTypes);
  Plexus::default_instance_ = new Plexus();
  TextPath::default_instance_ = new TextPath();
  NoiseEffector::default_instance_ = new NoiseEffector();
  Plexus::default_instance_->InitAsDefaultInstance();
  TextPath::default_instance_->InitAsDefaultInstance();
  NoiseEffector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_effect_5fsettings_5fplexus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_effect_5fsettings_5fplexus_2eproto {
  StaticDescriptorInitializer_effect_5fsettings_5fplexus_2eproto() {
    protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  }
} static_descriptor_initializer_effect_5fsettings_5fplexus_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Plexus::kTextPathsFieldNumber;
const int Plexus::kNoiseEffectorsFieldNumber;
#endif  // !_MSC_VER

Plexus::Plexus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plexus::InitAsDefaultInstance() {
}

Plexus::Plexus(const Plexus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plexus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plexus::~Plexus() {
  SharedDtor();
}

void Plexus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plexus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plexus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plexus_descriptor_;
}

const Plexus& Plexus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

Plexus* Plexus::default_instance_ = NULL;

Plexus* Plexus::New() const {
  return new Plexus;
}

void Plexus::Clear() {
  text_paths_.Clear();
  noise_effectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plexus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .effect.plexus.TextPath text_paths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_text_paths;
        if (input->ExpectTag(18)) goto parse_noise_effectors;
        break;
      }

      // repeated .effect.plexus.NoiseEffector noise_effectors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noise_effectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noise_effectors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noise_effectors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plexus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .effect.plexus.TextPath text_paths = 1;
  for (int i = 0; i < this->text_paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text_paths(i), output);
  }

  // repeated .effect.plexus.NoiseEffector noise_effectors = 2;
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->noise_effectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plexus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .effect.plexus.TextPath text_paths = 1;
  for (int i = 0; i < this->text_paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->text_paths(i), target);
  }

  // repeated .effect.plexus.NoiseEffector noise_effectors = 2;
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->noise_effectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plexus::ByteSize() const {
  int total_size = 0;

  // repeated .effect.plexus.TextPath text_paths = 1;
  total_size += 1 * this->text_paths_size();
  for (int i = 0; i < this->text_paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text_paths(i));
  }

  // repeated .effect.plexus.NoiseEffector noise_effectors = 2;
  total_size += 1 * this->noise_effectors_size();
  for (int i = 0; i < this->noise_effectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noise_effectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plexus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plexus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plexus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plexus::MergeFrom(const Plexus& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_paths_.MergeFrom(from.text_paths_);
  noise_effectors_.MergeFrom(from.noise_effectors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plexus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plexus::CopyFrom(const Plexus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plexus::IsInitialized() const {

  return true;
}

void Plexus::Swap(Plexus* other) {
  if (other != this) {
    text_paths_.Swap(&other->text_paths_);
    noise_effectors_.Swap(&other->noise_effectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plexus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plexus_descriptor_;
  metadata.reflection = Plexus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextPath::kTextFieldNumber;
#endif  // !_MSC_VER

TextPath::TextPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextPath::InitAsDefaultInstance() {
}

TextPath::TextPath(const TextPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextPath::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextPath::~TextPath() {
  SharedDtor();
}

void TextPath::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TextPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextPath_descriptor_;
}

const TextPath& TextPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

TextPath* TextPath::default_instance_ = NULL;

TextPath* TextPath::New() const {
  return new TextPath;
}

void TextPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextPath::MergeFrom(const TextPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextPath::CopyFrom(const TextPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPath::IsInitialized() const {

  return true;
}

void TextPath::Swap(TextPath* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextPath_descriptor_;
  metadata.reflection = TextPath_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NoiseEffector_ApplyTo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseEffector_ApplyTo_descriptor_;
}
bool NoiseEffector_ApplyTo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NoiseEffector_ApplyTo NoiseEffector::Position;
const NoiseEffector_ApplyTo NoiseEffector::Scale;
const NoiseEffector_ApplyTo NoiseEffector::ApplyTo_MIN;
const NoiseEffector_ApplyTo NoiseEffector::ApplyTo_MAX;
const int NoiseEffector::ApplyTo_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NoiseEffector::kApplyToFieldNumber;
const int NoiseEffector::kDisplacementFieldNumber;
#endif  // !_MSC_VER

NoiseEffector::NoiseEffector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoiseEffector::InitAsDefaultInstance() {
  displacement_ = const_cast< ::common::Vector3Anim*>(&::common::Vector3Anim::default_instance());
}

NoiseEffector::NoiseEffector(const NoiseEffector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoiseEffector::SharedCtor() {
  _cached_size_ = 0;
  apply_to_ = 1;
  displacement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseEffector::~NoiseEffector() {
  SharedDtor();
}

void NoiseEffector::SharedDtor() {
  if (this != default_instance_) {
    delete displacement_;
  }
}

void NoiseEffector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseEffector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseEffector_descriptor_;
}

const NoiseEffector& NoiseEffector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_effect_5fsettings_5fplexus_2eproto();
  return *default_instance_;
}

NoiseEffector* NoiseEffector::default_instance_ = NULL;

NoiseEffector* NoiseEffector::New() const {
  return new NoiseEffector;
}

void NoiseEffector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_to_ = 1;
    if (has_displacement()) {
      if (displacement_ != NULL) displacement_->::common::Vector3Anim::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoiseEffector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .effect.plexus.NoiseEffector.ApplyTo apply_to = 1 [default = Position];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::effect::plexus::NoiseEffector_ApplyTo_IsValid(value)) {
            set_apply_to(static_cast< ::effect::plexus::NoiseEffector_ApplyTo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_displacement;
        break;
      }

      // optional .common.Vector3Anim displacement = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displacement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_displacement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoiseEffector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .effect.plexus.NoiseEffector.ApplyTo apply_to = 1 [default = Position];
  if (has_apply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->apply_to(), output);
  }

  // optional .common.Vector3Anim displacement = 2;
  if (has_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->displacement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoiseEffector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .effect.plexus.NoiseEffector.ApplyTo apply_to = 1 [default = Position];
  if (has_apply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->apply_to(), target);
  }

  // optional .common.Vector3Anim displacement = 2;
  if (has_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->displacement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoiseEffector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .effect.plexus.NoiseEffector.ApplyTo apply_to = 1 [default = Position];
    if (has_apply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apply_to());
    }

    // optional .common.Vector3Anim displacement = 2;
    if (has_displacement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->displacement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseEffector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoiseEffector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoiseEffector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoiseEffector::MergeFrom(const NoiseEffector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_to()) {
      set_apply_to(from.apply_to());
    }
    if (from.has_displacement()) {
      mutable_displacement()->::common::Vector3Anim::MergeFrom(from.displacement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoiseEffector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseEffector::CopyFrom(const NoiseEffector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseEffector::IsInitialized() const {

  return true;
}

void NoiseEffector::Swap(NoiseEffector* other) {
  if (other != this) {
    std::swap(apply_to_, other->apply_to_);
    std::swap(displacement_, other->displacement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoiseEffector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseEffector_descriptor_;
  metadata.reflection = NoiseEffector_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plexus
}  // namespace effect

// @@protoc_insertion_point(global_scope)
