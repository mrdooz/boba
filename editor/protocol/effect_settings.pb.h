// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect_settings.proto

#ifndef PROTOBUF_effect_5fsettings_2eproto__INCLUDED
#define PROTOBUF_effect_5fsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace effect {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_effect_5fsettings_2eproto();
void protobuf_AssignDesc_effect_5fsettings_2eproto();
void protobuf_ShutdownFile_effect_5fsettings_2eproto();

class EffectSetting;
class EffectSettings;

enum EffectSetting_Type {
  EffectSetting_Type_Plexus = 1
};
bool EffectSetting_Type_IsValid(int value);
const EffectSetting_Type EffectSetting_Type_Type_MIN = EffectSetting_Type_Plexus;
const EffectSetting_Type EffectSetting_Type_Type_MAX = EffectSetting_Type_Plexus;
const int EffectSetting_Type_Type_ARRAYSIZE = EffectSetting_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EffectSetting_Type_descriptor();
inline const ::std::string& EffectSetting_Type_Name(EffectSetting_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectSetting_Type_descriptor(), value);
}
inline bool EffectSetting_Type_Parse(
    const ::std::string& name, EffectSetting_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectSetting_Type>(
    EffectSetting_Type_descriptor(), name, value);
}
// ===================================================================

class EffectSetting : public ::google::protobuf::Message {
 public:
  EffectSetting();
  virtual ~EffectSetting();

  EffectSetting(const EffectSetting& from);

  inline EffectSetting& operator=(const EffectSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectSetting& default_instance();

  void Swap(EffectSetting* other);

  // implements Message ----------------------------------------------

  EffectSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectSetting& from);
  void MergeFrom(const EffectSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EffectSetting_Type Type;
  static const Type Plexus = EffectSetting_Type_Plexus;
  static inline bool Type_IsValid(int value) {
    return EffectSetting_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EffectSetting_Type_Type_MIN;
  static const Type Type_MAX =
    EffectSetting_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EffectSetting_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EffectSetting_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EffectSetting_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EffectSetting_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .effect.protocol.EffectSetting.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::effect::protocol::EffectSetting_Type type() const;
  inline void set_type(::effect::protocol::EffectSetting_Type value);

  // optional string effect_class = 2;
  inline bool has_effect_class() const;
  inline void clear_effect_class();
  static const int kEffectClassFieldNumber = 2;
  inline const ::std::string& effect_class() const;
  inline void set_effect_class(const ::std::string& value);
  inline void set_effect_class(const char* value);
  inline void set_effect_class(const char* value, size_t size);
  inline ::std::string* mutable_effect_class();
  inline ::std::string* release_effect_class();
  inline void set_allocated_effect_class(::std::string* effect_class);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional bytes config_msg = 7;
  inline bool has_config_msg() const;
  inline void clear_config_msg();
  static const int kConfigMsgFieldNumber = 7;
  inline const ::std::string& config_msg() const;
  inline void set_config_msg(const ::std::string& value);
  inline void set_config_msg(const char* value);
  inline void set_config_msg(const void* value, size_t size);
  inline ::std::string* mutable_config_msg();
  inline ::std::string* release_config_msg();
  inline void set_allocated_config_msg(::std::string* config_msg);

  // optional string config_file = 8;
  inline bool has_config_file() const;
  inline void clear_config_file();
  static const int kConfigFileFieldNumber = 8;
  inline const ::std::string& config_file() const;
  inline void set_config_file(const ::std::string& value);
  inline void set_config_file(const char* value);
  inline void set_config_file(const char* value, size_t size);
  inline ::std::string* mutable_config_file();
  inline ::std::string* release_config_file();
  inline void set_allocated_config_file(::std::string* config_file);

  // @@protoc_insertion_point(class_scope:effect.protocol.EffectSetting)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_effect_class();
  inline void clear_has_effect_class();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_config_msg();
  inline void clear_has_config_msg();
  inline void set_has_config_file();
  inline void clear_has_config_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* effect_class_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  ::std::string* config_msg_;
  ::std::string* config_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_effect_5fsettings_2eproto();
  friend void protobuf_AssignDesc_effect_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_effect_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static EffectSetting* default_instance_;
};
// -------------------------------------------------------------------

class EffectSettings : public ::google::protobuf::Message {
 public:
  EffectSettings();
  virtual ~EffectSettings();

  EffectSettings(const EffectSettings& from);

  inline EffectSettings& operator=(const EffectSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectSettings& default_instance();

  void Swap(EffectSettings* other);

  // implements Message ----------------------------------------------

  EffectSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectSettings& from);
  void MergeFrom(const EffectSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .effect.protocol.EffectSetting effect_setting = 1;
  inline int effect_setting_size() const;
  inline void clear_effect_setting();
  static const int kEffectSettingFieldNumber = 1;
  inline const ::effect::protocol::EffectSetting& effect_setting(int index) const;
  inline ::effect::protocol::EffectSetting* mutable_effect_setting(int index);
  inline ::effect::protocol::EffectSetting* add_effect_setting();
  inline const ::google::protobuf::RepeatedPtrField< ::effect::protocol::EffectSetting >&
      effect_setting() const;
  inline ::google::protobuf::RepeatedPtrField< ::effect::protocol::EffectSetting >*
      mutable_effect_setting();

  // optional string soundtrack = 2;
  inline bool has_soundtrack() const;
  inline void clear_soundtrack();
  static const int kSoundtrackFieldNumber = 2;
  inline const ::std::string& soundtrack() const;
  inline void set_soundtrack(const ::std::string& value);
  inline void set_soundtrack(const char* value);
  inline void set_soundtrack(const char* value, size_t size);
  inline ::std::string* mutable_soundtrack();
  inline ::std::string* release_soundtrack();
  inline void set_allocated_soundtrack(::std::string* soundtrack);

  // @@protoc_insertion_point(class_scope:effect.protocol.EffectSettings)
 private:
  inline void set_has_soundtrack();
  inline void clear_has_soundtrack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::effect::protocol::EffectSetting > effect_setting_;
  ::std::string* soundtrack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_effect_5fsettings_2eproto();
  friend void protobuf_AssignDesc_effect_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_effect_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static EffectSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectSetting

// optional .effect.protocol.EffectSetting.Type type = 1;
inline bool EffectSetting::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectSetting::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectSetting::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectSetting::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::effect::protocol::EffectSetting_Type EffectSetting::type() const {
  return static_cast< ::effect::protocol::EffectSetting_Type >(type_);
}
inline void EffectSetting::set_type(::effect::protocol::EffectSetting_Type value) {
  assert(::effect::protocol::EffectSetting_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string effect_class = 2;
inline bool EffectSetting::has_effect_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSetting::set_has_effect_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSetting::clear_has_effect_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSetting::clear_effect_class() {
  if (effect_class_ != &::google::protobuf::internal::kEmptyString) {
    effect_class_->clear();
  }
  clear_has_effect_class();
}
inline const ::std::string& EffectSetting::effect_class() const {
  return *effect_class_;
}
inline void EffectSetting::set_effect_class(const ::std::string& value) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(value);
}
inline void EffectSetting::set_effect_class(const char* value) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(value);
}
inline void EffectSetting::set_effect_class(const char* value, size_t size) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSetting::mutable_effect_class() {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  return effect_class_;
}
inline ::std::string* EffectSetting::release_effect_class() {
  clear_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effect_class_;
    effect_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSetting::set_allocated_effect_class(::std::string* effect_class) {
  if (effect_class_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_class_;
  }
  if (effect_class) {
    set_has_effect_class();
    effect_class_ = effect_class;
  } else {
    clear_has_effect_class();
    effect_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 id = 3;
inline bool EffectSetting::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectSetting::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectSetting::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectSetting::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EffectSetting::id() const {
  return id_;
}
inline void EffectSetting::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 4;
inline bool EffectSetting::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectSetting::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectSetting::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectSetting::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EffectSetting::name() const {
  return *name_;
}
inline void EffectSetting::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EffectSetting::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EffectSetting::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSetting::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EffectSetting::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSetting::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 start_time = 5;
inline bool EffectSetting::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EffectSetting::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EffectSetting::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EffectSetting::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 EffectSetting::start_time() const {
  return start_time_;
}
inline void EffectSetting::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint32 end_time = 6;
inline bool EffectSetting::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EffectSetting::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EffectSetting::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EffectSetting::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 EffectSetting::end_time() const {
  return end_time_;
}
inline void EffectSetting::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional bytes config_msg = 7;
inline bool EffectSetting::has_config_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EffectSetting::set_has_config_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EffectSetting::clear_has_config_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EffectSetting::clear_config_msg() {
  if (config_msg_ != &::google::protobuf::internal::kEmptyString) {
    config_msg_->clear();
  }
  clear_has_config_msg();
}
inline const ::std::string& EffectSetting::config_msg() const {
  return *config_msg_;
}
inline void EffectSetting::set_config_msg(const ::std::string& value) {
  set_has_config_msg();
  if (config_msg_ == &::google::protobuf::internal::kEmptyString) {
    config_msg_ = new ::std::string;
  }
  config_msg_->assign(value);
}
inline void EffectSetting::set_config_msg(const char* value) {
  set_has_config_msg();
  if (config_msg_ == &::google::protobuf::internal::kEmptyString) {
    config_msg_ = new ::std::string;
  }
  config_msg_->assign(value);
}
inline void EffectSetting::set_config_msg(const void* value, size_t size) {
  set_has_config_msg();
  if (config_msg_ == &::google::protobuf::internal::kEmptyString) {
    config_msg_ = new ::std::string;
  }
  config_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSetting::mutable_config_msg() {
  set_has_config_msg();
  if (config_msg_ == &::google::protobuf::internal::kEmptyString) {
    config_msg_ = new ::std::string;
  }
  return config_msg_;
}
inline ::std::string* EffectSetting::release_config_msg() {
  clear_has_config_msg();
  if (config_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_msg_;
    config_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSetting::set_allocated_config_msg(::std::string* config_msg) {
  if (config_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete config_msg_;
  }
  if (config_msg) {
    set_has_config_msg();
    config_msg_ = config_msg;
  } else {
    clear_has_config_msg();
    config_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string config_file = 8;
inline bool EffectSetting::has_config_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EffectSetting::set_has_config_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EffectSetting::clear_has_config_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EffectSetting::clear_config_file() {
  if (config_file_ != &::google::protobuf::internal::kEmptyString) {
    config_file_->clear();
  }
  clear_has_config_file();
}
inline const ::std::string& EffectSetting::config_file() const {
  return *config_file_;
}
inline void EffectSetting::set_config_file(const ::std::string& value) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::kEmptyString) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(value);
}
inline void EffectSetting::set_config_file(const char* value) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::kEmptyString) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(value);
}
inline void EffectSetting::set_config_file(const char* value, size_t size) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::kEmptyString) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSetting::mutable_config_file() {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::kEmptyString) {
    config_file_ = new ::std::string;
  }
  return config_file_;
}
inline ::std::string* EffectSetting::release_config_file() {
  clear_has_config_file();
  if (config_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_file_;
    config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSetting::set_allocated_config_file(::std::string* config_file) {
  if (config_file_ != &::google::protobuf::internal::kEmptyString) {
    delete config_file_;
  }
  if (config_file) {
    set_has_config_file();
    config_file_ = config_file;
  } else {
    clear_has_config_file();
    config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EffectSettings

// repeated .effect.protocol.EffectSetting effect_setting = 1;
inline int EffectSettings::effect_setting_size() const {
  return effect_setting_.size();
}
inline void EffectSettings::clear_effect_setting() {
  effect_setting_.Clear();
}
inline const ::effect::protocol::EffectSetting& EffectSettings::effect_setting(int index) const {
  return effect_setting_.Get(index);
}
inline ::effect::protocol::EffectSetting* EffectSettings::mutable_effect_setting(int index) {
  return effect_setting_.Mutable(index);
}
inline ::effect::protocol::EffectSetting* EffectSettings::add_effect_setting() {
  return effect_setting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::effect::protocol::EffectSetting >&
EffectSettings::effect_setting() const {
  return effect_setting_;
}
inline ::google::protobuf::RepeatedPtrField< ::effect::protocol::EffectSetting >*
EffectSettings::mutable_effect_setting() {
  return &effect_setting_;
}

// optional string soundtrack = 2;
inline bool EffectSettings::has_soundtrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSettings::set_has_soundtrack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSettings::clear_has_soundtrack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSettings::clear_soundtrack() {
  if (soundtrack_ != &::google::protobuf::internal::kEmptyString) {
    soundtrack_->clear();
  }
  clear_has_soundtrack();
}
inline const ::std::string& EffectSettings::soundtrack() const {
  return *soundtrack_;
}
inline void EffectSettings::set_soundtrack(const ::std::string& value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
}
inline void EffectSettings::set_soundtrack(const char* value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
}
inline void EffectSettings::set_soundtrack(const char* value, size_t size) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSettings::mutable_soundtrack() {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  return soundtrack_;
}
inline ::std::string* EffectSettings::release_soundtrack() {
  clear_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soundtrack_;
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSettings::set_allocated_soundtrack(::std::string* soundtrack) {
  if (soundtrack_ != &::google::protobuf::internal::kEmptyString) {
    delete soundtrack_;
  }
  if (soundtrack) {
    set_has_soundtrack();
    soundtrack_ = soundtrack;
  } else {
    clear_has_soundtrack();
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace effect

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::effect::protocol::EffectSetting_Type>() {
  return ::effect::protocol::EffectSetting_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_effect_5fsettings_2eproto__INCLUDED
