// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_settings.proto

#ifndef PROTOBUF_editor_5fsettings_2eproto__INCLUDED
#define PROTOBUF_editor_5fsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace editor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_editor_5fsettings_2eproto();
void protobuf_AssignDesc_editor_5fsettings_2eproto();
void protobuf_ShutdownFile_editor_5fsettings_2eproto();

class Color4;
class Settings;

// ===================================================================

class Color4 : public ::google::protobuf::Message {
 public:
  Color4();
  virtual ~Color4();

  Color4(const Color4& from);

  inline Color4& operator=(const Color4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color4& default_instance();

  void Swap(Color4* other);

  // implements Message ----------------------------------------------

  Color4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color4& from);
  void MergeFrom(const Color4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 r = 1 [default = 0];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // optional uint32 g = 2 [default = 0];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);

  // optional uint32 b = 3 [default = 0];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // optional uint32 a = 4 [default = 255];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::uint32 a() const;
  inline void set_a(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:editor.Color4)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_editor_5fsettings_2eproto();
  friend void protobuf_AssignDesc_editor_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_editor_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static Color4* default_instance_;
};
// -------------------------------------------------------------------

class Settings : public ::google::protobuf::Message {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  void Swap(Settings* other);

  // implements Message ----------------------------------------------

  Settings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticker_height = 1 [default = 50];
  inline bool has_ticker_height() const;
  inline void clear_ticker_height();
  static const int kTickerHeightFieldNumber = 1;
  inline ::google::protobuf::uint32 ticker_height() const;
  inline void set_ticker_height(::google::protobuf::uint32 value);

  // optional uint32 ticker_interval = 2 [default = 20];
  inline bool has_ticker_interval() const;
  inline void clear_ticker_interval();
  static const int kTickerIntervalFieldNumber = 2;
  inline ::google::protobuf::uint32 ticker_interval() const;
  inline void set_ticker_interval(::google::protobuf::uint32 value);

  // optional uint32 ticks_per_interval = 3 [default = 4];
  inline bool has_ticks_per_interval() const;
  inline void clear_ticks_per_interval();
  static const int kTicksPerIntervalFieldNumber = 3;
  inline ::google::protobuf::uint32 ticks_per_interval() const;
  inline void set_ticks_per_interval(::google::protobuf::uint32 value);

  // optional uint32 module_view_width = 20 [default = 200];
  inline bool has_module_view_width() const;
  inline void clear_module_view_width();
  static const int kModuleViewWidthFieldNumber = 20;
  inline ::google::protobuf::uint32 module_view_width() const;
  inline void set_module_view_width(::google::protobuf::uint32 value);

  // optional uint32 module_row_height = 21 [default = 50];
  inline bool has_module_row_height() const;
  inline void clear_module_row_height();
  static const int kModuleRowHeightFieldNumber = 21;
  inline ::google::protobuf::uint32 module_row_height() const;
  inline void set_module_row_height(::google::protobuf::uint32 value);

  // optional uint32 effect_height = 30 [default = 40];
  inline bool has_effect_height() const;
  inline void clear_effect_height();
  static const int kEffectHeightFieldNumber = 30;
  inline ::google::protobuf::uint32 effect_height() const;
  inline void set_effect_height(::google::protobuf::uint32 value);

  // optional .editor.Color4 default_row_color = 100;
  inline bool has_default_row_color() const;
  inline void clear_default_row_color();
  static const int kDefaultRowColorFieldNumber = 100;
  inline const ::editor::Color4& default_row_color() const;
  inline ::editor::Color4* mutable_default_row_color();
  inline ::editor::Color4* release_default_row_color();
  inline void set_allocated_default_row_color(::editor::Color4* default_row_color);

  // optional .editor.Color4 selected_row_color = 101;
  inline bool has_selected_row_color() const;
  inline void clear_selected_row_color();
  static const int kSelectedRowColorFieldNumber = 101;
  inline const ::editor::Color4& selected_row_color() const;
  inline ::editor::Color4* mutable_selected_row_color();
  inline ::editor::Color4* release_selected_row_color();
  inline void set_allocated_selected_row_color(::editor::Color4* selected_row_color);

  // optional .editor.Color4 hover_row_color = 102;
  inline bool has_hover_row_color() const;
  inline void clear_hover_row_color();
  static const int kHoverRowColorFieldNumber = 102;
  inline const ::editor::Color4& hover_row_color() const;
  inline ::editor::Color4* mutable_hover_row_color();
  inline ::editor::Color4* release_hover_row_color();
  inline void set_allocated_hover_row_color(::editor::Color4* hover_row_color);

  // optional .editor.Color4 invalid_hover_row_color = 103;
  inline bool has_invalid_hover_row_color() const;
  inline void clear_invalid_hover_row_color();
  static const int kInvalidHoverRowColorFieldNumber = 103;
  inline const ::editor::Color4& invalid_hover_row_color() const;
  inline ::editor::Color4* mutable_invalid_hover_row_color();
  inline ::editor::Color4* release_invalid_hover_row_color();
  inline void set_allocated_invalid_hover_row_color(::editor::Color4* invalid_hover_row_color);

  // @@protoc_insertion_point(class_scope:editor.Settings)
 private:
  inline void set_has_ticker_height();
  inline void clear_has_ticker_height();
  inline void set_has_ticker_interval();
  inline void clear_has_ticker_interval();
  inline void set_has_ticks_per_interval();
  inline void clear_has_ticks_per_interval();
  inline void set_has_module_view_width();
  inline void clear_has_module_view_width();
  inline void set_has_module_row_height();
  inline void clear_has_module_row_height();
  inline void set_has_effect_height();
  inline void clear_has_effect_height();
  inline void set_has_default_row_color();
  inline void clear_has_default_row_color();
  inline void set_has_selected_row_color();
  inline void clear_has_selected_row_color();
  inline void set_has_hover_row_color();
  inline void clear_has_hover_row_color();
  inline void set_has_invalid_hover_row_color();
  inline void clear_has_invalid_hover_row_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ticker_height_;
  ::google::protobuf::uint32 ticker_interval_;
  ::google::protobuf::uint32 ticks_per_interval_;
  ::google::protobuf::uint32 module_view_width_;
  ::google::protobuf::uint32 module_row_height_;
  ::google::protobuf::uint32 effect_height_;
  ::editor::Color4* default_row_color_;
  ::editor::Color4* selected_row_color_;
  ::editor::Color4* hover_row_color_;
  ::editor::Color4* invalid_hover_row_color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_editor_5fsettings_2eproto();
  friend void protobuf_AssignDesc_editor_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_editor_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static Settings* default_instance_;
};
// ===================================================================


// ===================================================================

// Color4

// optional uint32 r = 1 [default = 0];
inline bool Color4::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color4::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color4::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color4::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 Color4::r() const {
  return r_;
}
inline void Color4::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
}

// optional uint32 g = 2 [default = 0];
inline bool Color4::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color4::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color4::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color4::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 Color4::g() const {
  return g_;
}
inline void Color4::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
}

// optional uint32 b = 3 [default = 0];
inline bool Color4::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color4::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color4::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color4::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 Color4::b() const {
  return b_;
}
inline void Color4::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
}

// optional uint32 a = 4 [default = 255];
inline bool Color4::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color4::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color4::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color4::clear_a() {
  a_ = 255u;
  clear_has_a();
}
inline ::google::protobuf::uint32 Color4::a() const {
  return a_;
}
inline void Color4::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// Settings

// optional uint32 ticker_height = 1 [default = 50];
inline bool Settings::has_ticker_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::set_has_ticker_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settings::clear_has_ticker_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settings::clear_ticker_height() {
  ticker_height_ = 50u;
  clear_has_ticker_height();
}
inline ::google::protobuf::uint32 Settings::ticker_height() const {
  return ticker_height_;
}
inline void Settings::set_ticker_height(::google::protobuf::uint32 value) {
  set_has_ticker_height();
  ticker_height_ = value;
}

// optional uint32 ticker_interval = 2 [default = 20];
inline bool Settings::has_ticker_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settings::set_has_ticker_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settings::clear_has_ticker_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settings::clear_ticker_interval() {
  ticker_interval_ = 20u;
  clear_has_ticker_interval();
}
inline ::google::protobuf::uint32 Settings::ticker_interval() const {
  return ticker_interval_;
}
inline void Settings::set_ticker_interval(::google::protobuf::uint32 value) {
  set_has_ticker_interval();
  ticker_interval_ = value;
}

// optional uint32 ticks_per_interval = 3 [default = 4];
inline bool Settings::has_ticks_per_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settings::set_has_ticks_per_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settings::clear_has_ticks_per_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settings::clear_ticks_per_interval() {
  ticks_per_interval_ = 4u;
  clear_has_ticks_per_interval();
}
inline ::google::protobuf::uint32 Settings::ticks_per_interval() const {
  return ticks_per_interval_;
}
inline void Settings::set_ticks_per_interval(::google::protobuf::uint32 value) {
  set_has_ticks_per_interval();
  ticks_per_interval_ = value;
}

// optional uint32 module_view_width = 20 [default = 200];
inline bool Settings::has_module_view_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settings::set_has_module_view_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Settings::clear_has_module_view_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Settings::clear_module_view_width() {
  module_view_width_ = 200u;
  clear_has_module_view_width();
}
inline ::google::protobuf::uint32 Settings::module_view_width() const {
  return module_view_width_;
}
inline void Settings::set_module_view_width(::google::protobuf::uint32 value) {
  set_has_module_view_width();
  module_view_width_ = value;
}

// optional uint32 module_row_height = 21 [default = 50];
inline bool Settings::has_module_row_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Settings::set_has_module_row_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Settings::clear_has_module_row_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Settings::clear_module_row_height() {
  module_row_height_ = 50u;
  clear_has_module_row_height();
}
inline ::google::protobuf::uint32 Settings::module_row_height() const {
  return module_row_height_;
}
inline void Settings::set_module_row_height(::google::protobuf::uint32 value) {
  set_has_module_row_height();
  module_row_height_ = value;
}

// optional uint32 effect_height = 30 [default = 40];
inline bool Settings::has_effect_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Settings::set_has_effect_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Settings::clear_has_effect_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Settings::clear_effect_height() {
  effect_height_ = 40u;
  clear_has_effect_height();
}
inline ::google::protobuf::uint32 Settings::effect_height() const {
  return effect_height_;
}
inline void Settings::set_effect_height(::google::protobuf::uint32 value) {
  set_has_effect_height();
  effect_height_ = value;
}

// optional .editor.Color4 default_row_color = 100;
inline bool Settings::has_default_row_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Settings::set_has_default_row_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Settings::clear_has_default_row_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Settings::clear_default_row_color() {
  if (default_row_color_ != NULL) default_row_color_->::editor::Color4::Clear();
  clear_has_default_row_color();
}
inline const ::editor::Color4& Settings::default_row_color() const {
  return default_row_color_ != NULL ? *default_row_color_ : *default_instance_->default_row_color_;
}
inline ::editor::Color4* Settings::mutable_default_row_color() {
  set_has_default_row_color();
  if (default_row_color_ == NULL) default_row_color_ = new ::editor::Color4;
  return default_row_color_;
}
inline ::editor::Color4* Settings::release_default_row_color() {
  clear_has_default_row_color();
  ::editor::Color4* temp = default_row_color_;
  default_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_default_row_color(::editor::Color4* default_row_color) {
  delete default_row_color_;
  default_row_color_ = default_row_color;
  if (default_row_color) {
    set_has_default_row_color();
  } else {
    clear_has_default_row_color();
  }
}

// optional .editor.Color4 selected_row_color = 101;
inline bool Settings::has_selected_row_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Settings::set_has_selected_row_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Settings::clear_has_selected_row_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Settings::clear_selected_row_color() {
  if (selected_row_color_ != NULL) selected_row_color_->::editor::Color4::Clear();
  clear_has_selected_row_color();
}
inline const ::editor::Color4& Settings::selected_row_color() const {
  return selected_row_color_ != NULL ? *selected_row_color_ : *default_instance_->selected_row_color_;
}
inline ::editor::Color4* Settings::mutable_selected_row_color() {
  set_has_selected_row_color();
  if (selected_row_color_ == NULL) selected_row_color_ = new ::editor::Color4;
  return selected_row_color_;
}
inline ::editor::Color4* Settings::release_selected_row_color() {
  clear_has_selected_row_color();
  ::editor::Color4* temp = selected_row_color_;
  selected_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_selected_row_color(::editor::Color4* selected_row_color) {
  delete selected_row_color_;
  selected_row_color_ = selected_row_color;
  if (selected_row_color) {
    set_has_selected_row_color();
  } else {
    clear_has_selected_row_color();
  }
}

// optional .editor.Color4 hover_row_color = 102;
inline bool Settings::has_hover_row_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Settings::set_has_hover_row_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Settings::clear_has_hover_row_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Settings::clear_hover_row_color() {
  if (hover_row_color_ != NULL) hover_row_color_->::editor::Color4::Clear();
  clear_has_hover_row_color();
}
inline const ::editor::Color4& Settings::hover_row_color() const {
  return hover_row_color_ != NULL ? *hover_row_color_ : *default_instance_->hover_row_color_;
}
inline ::editor::Color4* Settings::mutable_hover_row_color() {
  set_has_hover_row_color();
  if (hover_row_color_ == NULL) hover_row_color_ = new ::editor::Color4;
  return hover_row_color_;
}
inline ::editor::Color4* Settings::release_hover_row_color() {
  clear_has_hover_row_color();
  ::editor::Color4* temp = hover_row_color_;
  hover_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_hover_row_color(::editor::Color4* hover_row_color) {
  delete hover_row_color_;
  hover_row_color_ = hover_row_color;
  if (hover_row_color) {
    set_has_hover_row_color();
  } else {
    clear_has_hover_row_color();
  }
}

// optional .editor.Color4 invalid_hover_row_color = 103;
inline bool Settings::has_invalid_hover_row_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Settings::set_has_invalid_hover_row_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Settings::clear_has_invalid_hover_row_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Settings::clear_invalid_hover_row_color() {
  if (invalid_hover_row_color_ != NULL) invalid_hover_row_color_->::editor::Color4::Clear();
  clear_has_invalid_hover_row_color();
}
inline const ::editor::Color4& Settings::invalid_hover_row_color() const {
  return invalid_hover_row_color_ != NULL ? *invalid_hover_row_color_ : *default_instance_->invalid_hover_row_color_;
}
inline ::editor::Color4* Settings::mutable_invalid_hover_row_color() {
  set_has_invalid_hover_row_color();
  if (invalid_hover_row_color_ == NULL) invalid_hover_row_color_ = new ::editor::Color4;
  return invalid_hover_row_color_;
}
inline ::editor::Color4* Settings::release_invalid_hover_row_color() {
  clear_has_invalid_hover_row_color();
  ::editor::Color4* temp = invalid_hover_row_color_;
  invalid_hover_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_invalid_hover_row_color(::editor::Color4* invalid_hover_row_color) {
  delete invalid_hover_row_color_;
  invalid_hover_row_color_ = invalid_hover_row_color;
  if (invalid_hover_row_color) {
    set_has_invalid_hover_row_color();
  } else {
    clear_has_invalid_hover_row_color();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace editor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_editor_5fsettings_2eproto__INCLUDED
