// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Color4;
class Vector2;
class Vector3;
class Vector4;
class Matrix3x3;
class Matrix4x4;
class FloatKey;
class FloatKeyframe;
class FloatAnim;

// ===================================================================

class Color4 : public ::google::protobuf::Message {
 public:
  Color4();
  virtual ~Color4();

  Color4(const Color4& from);

  inline Color4& operator=(const Color4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color4& default_instance();

  void Swap(Color4* other);

  // implements Message ----------------------------------------------

  Color4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color4& from);
  void MergeFrom(const Color4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 r = 1 [default = 0];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // optional uint32 g = 2 [default = 0];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);

  // optional uint32 b = 3 [default = 0];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // optional uint32 a = 4 [default = 255];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::uint32 a() const;
  inline void set_a(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.common.Color4)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Color4* default_instance_;
};
// -------------------------------------------------------------------

class Vector2 : public ::google::protobuf::Message {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();

  void Swap(Vector2* other);

  // implements Message ----------------------------------------------

  Vector2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:protocol.common.Vector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Vector2* default_instance_;
};
// -------------------------------------------------------------------

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:protocol.common.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class Vector4 : public ::google::protobuf::Message {
 public:
  Vector4();
  virtual ~Vector4();

  Vector4(const Vector4& from);

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4& default_instance();

  void Swap(Vector4* other);

  // implements Message ----------------------------------------------

  Vector4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector4& from);
  void MergeFrom(const Vector4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:protocol.common.Vector4)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  float w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Vector4* default_instance_;
};
// -------------------------------------------------------------------

class Matrix3x3 : public ::google::protobuf::Message {
 public:
  Matrix3x3();
  virtual ~Matrix3x3();

  Matrix3x3(const Matrix3x3& from);

  inline Matrix3x3& operator=(const Matrix3x3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix3x3& default_instance();

  void Swap(Matrix3x3* other);

  // implements Message ----------------------------------------------

  Matrix3x3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix3x3& from);
  void MergeFrom(const Matrix3x3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.common.Vector3 row_1 = 1;
  inline bool has_row_1() const;
  inline void clear_row_1();
  static const int kRow1FieldNumber = 1;
  inline const ::protocol::common::Vector3& row_1() const;
  inline ::protocol::common::Vector3* mutable_row_1();
  inline ::protocol::common::Vector3* release_row_1();
  inline void set_allocated_row_1(::protocol::common::Vector3* row_1);

  // optional .protocol.common.Vector3 row_2 = 2;
  inline bool has_row_2() const;
  inline void clear_row_2();
  static const int kRow2FieldNumber = 2;
  inline const ::protocol::common::Vector3& row_2() const;
  inline ::protocol::common::Vector3* mutable_row_2();
  inline ::protocol::common::Vector3* release_row_2();
  inline void set_allocated_row_2(::protocol::common::Vector3* row_2);

  // optional .protocol.common.Vector3 row_3 = 3;
  inline bool has_row_3() const;
  inline void clear_row_3();
  static const int kRow3FieldNumber = 3;
  inline const ::protocol::common::Vector3& row_3() const;
  inline ::protocol::common::Vector3* mutable_row_3();
  inline ::protocol::common::Vector3* release_row_3();
  inline void set_allocated_row_3(::protocol::common::Vector3* row_3);

  // @@protoc_insertion_point(class_scope:protocol.common.Matrix3x3)
 private:
  inline void set_has_row_1();
  inline void clear_has_row_1();
  inline void set_has_row_2();
  inline void clear_has_row_2();
  inline void set_has_row_3();
  inline void clear_has_row_3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::common::Vector3* row_1_;
  ::protocol::common::Vector3* row_2_;
  ::protocol::common::Vector3* row_3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Matrix3x3* default_instance_;
};
// -------------------------------------------------------------------

class Matrix4x4 : public ::google::protobuf::Message {
 public:
  Matrix4x4();
  virtual ~Matrix4x4();

  Matrix4x4(const Matrix4x4& from);

  inline Matrix4x4& operator=(const Matrix4x4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix4x4& default_instance();

  void Swap(Matrix4x4* other);

  // implements Message ----------------------------------------------

  Matrix4x4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix4x4& from);
  void MergeFrom(const Matrix4x4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.common.Vector4 row_1 = 1;
  inline bool has_row_1() const;
  inline void clear_row_1();
  static const int kRow1FieldNumber = 1;
  inline const ::protocol::common::Vector4& row_1() const;
  inline ::protocol::common::Vector4* mutable_row_1();
  inline ::protocol::common::Vector4* release_row_1();
  inline void set_allocated_row_1(::protocol::common::Vector4* row_1);

  // optional .protocol.common.Vector4 row_2 = 2;
  inline bool has_row_2() const;
  inline void clear_row_2();
  static const int kRow2FieldNumber = 2;
  inline const ::protocol::common::Vector4& row_2() const;
  inline ::protocol::common::Vector4* mutable_row_2();
  inline ::protocol::common::Vector4* release_row_2();
  inline void set_allocated_row_2(::protocol::common::Vector4* row_2);

  // optional .protocol.common.Vector4 row_3 = 3;
  inline bool has_row_3() const;
  inline void clear_row_3();
  static const int kRow3FieldNumber = 3;
  inline const ::protocol::common::Vector4& row_3() const;
  inline ::protocol::common::Vector4* mutable_row_3();
  inline ::protocol::common::Vector4* release_row_3();
  inline void set_allocated_row_3(::protocol::common::Vector4* row_3);

  // optional .protocol.common.Vector4 row_4 = 4;
  inline bool has_row_4() const;
  inline void clear_row_4();
  static const int kRow4FieldNumber = 4;
  inline const ::protocol::common::Vector4& row_4() const;
  inline ::protocol::common::Vector4* mutable_row_4();
  inline ::protocol::common::Vector4* release_row_4();
  inline void set_allocated_row_4(::protocol::common::Vector4* row_4);

  // @@protoc_insertion_point(class_scope:protocol.common.Matrix4x4)
 private:
  inline void set_has_row_1();
  inline void clear_has_row_1();
  inline void set_has_row_2();
  inline void clear_has_row_2();
  inline void set_has_row_3();
  inline void clear_has_row_3();
  inline void set_has_row_4();
  inline void clear_has_row_4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::common::Vector4* row_1_;
  ::protocol::common::Vector4* row_2_;
  ::protocol::common::Vector4* row_3_;
  ::protocol::common::Vector4* row_4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Matrix4x4* default_instance_;
};
// -------------------------------------------------------------------

class FloatKey : public ::google::protobuf::Message {
 public:
  FloatKey();
  virtual ~FloatKey();

  FloatKey(const FloatKey& from);

  inline FloatKey& operator=(const FloatKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatKey& default_instance();

  void Swap(FloatKey* other);

  // implements Message ----------------------------------------------

  FloatKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatKey& from);
  void MergeFrom(const FloatKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional float value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:protocol.common.FloatKey)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FloatKey* default_instance_;
};
// -------------------------------------------------------------------

class FloatKeyframe : public ::google::protobuf::Message {
 public:
  FloatKeyframe();
  virtual ~FloatKeyframe();

  FloatKeyframe(const FloatKeyframe& from);

  inline FloatKeyframe& operator=(const FloatKeyframe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatKeyframe& default_instance();

  void Swap(FloatKeyframe* other);

  // implements Message ----------------------------------------------

  FloatKeyframe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatKeyframe& from);
  void MergeFrom(const FloatKeyframe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.common.FloatKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::protocol::common::FloatKey& key() const;
  inline ::protocol::common::FloatKey* mutable_key();
  inline ::protocol::common::FloatKey* release_key();
  inline void set_allocated_key(::protocol::common::FloatKey* key);

  // optional .protocol.common.FloatKey cp_in = 2;
  inline bool has_cp_in() const;
  inline void clear_cp_in();
  static const int kCpInFieldNumber = 2;
  inline const ::protocol::common::FloatKey& cp_in() const;
  inline ::protocol::common::FloatKey* mutable_cp_in();
  inline ::protocol::common::FloatKey* release_cp_in();
  inline void set_allocated_cp_in(::protocol::common::FloatKey* cp_in);

  // optional .protocol.common.FloatKey cp_out = 3;
  inline bool has_cp_out() const;
  inline void clear_cp_out();
  static const int kCpOutFieldNumber = 3;
  inline const ::protocol::common::FloatKey& cp_out() const;
  inline ::protocol::common::FloatKey* mutable_cp_out();
  inline ::protocol::common::FloatKey* release_cp_out();
  inline void set_allocated_cp_out(::protocol::common::FloatKey* cp_out);

  // @@protoc_insertion_point(class_scope:protocol.common.FloatKeyframe)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_cp_in();
  inline void clear_has_cp_in();
  inline void set_has_cp_out();
  inline void clear_has_cp_out();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::common::FloatKey* key_;
  ::protocol::common::FloatKey* cp_in_;
  ::protocol::common::FloatKey* cp_out_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FloatKeyframe* default_instance_;
};
// -------------------------------------------------------------------

class FloatAnim : public ::google::protobuf::Message {
 public:
  FloatAnim();
  virtual ~FloatAnim();

  FloatAnim(const FloatAnim& from);

  inline FloatAnim& operator=(const FloatAnim& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatAnim& default_instance();

  void Swap(FloatAnim* other);

  // implements Message ----------------------------------------------

  FloatAnim* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatAnim& from);
  void MergeFrom(const FloatAnim& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1 [default = 2];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .protocol.common.FloatKeyframe keyframe = 2;
  inline int keyframe_size() const;
  inline void clear_keyframe();
  static const int kKeyframeFieldNumber = 2;
  inline const ::protocol::common::FloatKeyframe& keyframe(int index) const;
  inline ::protocol::common::FloatKeyframe* mutable_keyframe(int index);
  inline ::protocol::common::FloatKeyframe* add_keyframe();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::common::FloatKeyframe >&
      keyframe() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::common::FloatKeyframe >*
      mutable_keyframe();

  // @@protoc_insertion_point(class_scope:protocol.common.FloatAnim)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::common::FloatKeyframe > keyframe_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FloatAnim* default_instance_;
};
// ===================================================================


// ===================================================================

// Color4

// optional uint32 r = 1 [default = 0];
inline bool Color4::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color4::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color4::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color4::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 Color4::r() const {
  return r_;
}
inline void Color4::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
}

// optional uint32 g = 2 [default = 0];
inline bool Color4::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color4::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color4::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color4::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 Color4::g() const {
  return g_;
}
inline void Color4::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
}

// optional uint32 b = 3 [default = 0];
inline bool Color4::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color4::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color4::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color4::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 Color4::b() const {
  return b_;
}
inline void Color4::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
}

// optional uint32 a = 4 [default = 255];
inline bool Color4::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color4::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color4::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color4::clear_a() {
  a_ = 255u;
  clear_has_a();
}
inline ::google::protobuf::uint32 Color4::a() const {
  return a_;
}
inline void Color4::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// Vector2

// optional float x = 1;
inline bool Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2::x() const {
  return x_;
}
inline void Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2::y() const {
  return y_;
}
inline void Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Vector3

// optional float x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Vector4

// optional float x = 1;
inline bool Vector4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector4::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector4::x() const {
  return x_;
}
inline void Vector4::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector4::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector4::y() const {
  return y_;
}
inline void Vector4::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vector4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector4::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector4::z() const {
  return z_;
}
inline void Vector4::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float w = 4;
inline bool Vector4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vector4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vector4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vector4::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Vector4::w() const {
  return w_;
}
inline void Vector4::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Matrix3x3

// optional .protocol.common.Vector3 row_1 = 1;
inline bool Matrix3x3::has_row_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix3x3::set_has_row_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix3x3::clear_has_row_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix3x3::clear_row_1() {
  if (row_1_ != NULL) row_1_->::protocol::common::Vector3::Clear();
  clear_has_row_1();
}
inline const ::protocol::common::Vector3& Matrix3x3::row_1() const {
  return row_1_ != NULL ? *row_1_ : *default_instance_->row_1_;
}
inline ::protocol::common::Vector3* Matrix3x3::mutable_row_1() {
  set_has_row_1();
  if (row_1_ == NULL) row_1_ = new ::protocol::common::Vector3;
  return row_1_;
}
inline ::protocol::common::Vector3* Matrix3x3::release_row_1() {
  clear_has_row_1();
  ::protocol::common::Vector3* temp = row_1_;
  row_1_ = NULL;
  return temp;
}
inline void Matrix3x3::set_allocated_row_1(::protocol::common::Vector3* row_1) {
  delete row_1_;
  row_1_ = row_1;
  if (row_1) {
    set_has_row_1();
  } else {
    clear_has_row_1();
  }
}

// optional .protocol.common.Vector3 row_2 = 2;
inline bool Matrix3x3::has_row_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix3x3::set_has_row_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix3x3::clear_has_row_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix3x3::clear_row_2() {
  if (row_2_ != NULL) row_2_->::protocol::common::Vector3::Clear();
  clear_has_row_2();
}
inline const ::protocol::common::Vector3& Matrix3x3::row_2() const {
  return row_2_ != NULL ? *row_2_ : *default_instance_->row_2_;
}
inline ::protocol::common::Vector3* Matrix3x3::mutable_row_2() {
  set_has_row_2();
  if (row_2_ == NULL) row_2_ = new ::protocol::common::Vector3;
  return row_2_;
}
inline ::protocol::common::Vector3* Matrix3x3::release_row_2() {
  clear_has_row_2();
  ::protocol::common::Vector3* temp = row_2_;
  row_2_ = NULL;
  return temp;
}
inline void Matrix3x3::set_allocated_row_2(::protocol::common::Vector3* row_2) {
  delete row_2_;
  row_2_ = row_2;
  if (row_2) {
    set_has_row_2();
  } else {
    clear_has_row_2();
  }
}

// optional .protocol.common.Vector3 row_3 = 3;
inline bool Matrix3x3::has_row_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix3x3::set_has_row_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix3x3::clear_has_row_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix3x3::clear_row_3() {
  if (row_3_ != NULL) row_3_->::protocol::common::Vector3::Clear();
  clear_has_row_3();
}
inline const ::protocol::common::Vector3& Matrix3x3::row_3() const {
  return row_3_ != NULL ? *row_3_ : *default_instance_->row_3_;
}
inline ::protocol::common::Vector3* Matrix3x3::mutable_row_3() {
  set_has_row_3();
  if (row_3_ == NULL) row_3_ = new ::protocol::common::Vector3;
  return row_3_;
}
inline ::protocol::common::Vector3* Matrix3x3::release_row_3() {
  clear_has_row_3();
  ::protocol::common::Vector3* temp = row_3_;
  row_3_ = NULL;
  return temp;
}
inline void Matrix3x3::set_allocated_row_3(::protocol::common::Vector3* row_3) {
  delete row_3_;
  row_3_ = row_3;
  if (row_3) {
    set_has_row_3();
  } else {
    clear_has_row_3();
  }
}

// -------------------------------------------------------------------

// Matrix4x4

// optional .protocol.common.Vector4 row_1 = 1;
inline bool Matrix4x4::has_row_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix4x4::set_has_row_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix4x4::clear_has_row_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix4x4::clear_row_1() {
  if (row_1_ != NULL) row_1_->::protocol::common::Vector4::Clear();
  clear_has_row_1();
}
inline const ::protocol::common::Vector4& Matrix4x4::row_1() const {
  return row_1_ != NULL ? *row_1_ : *default_instance_->row_1_;
}
inline ::protocol::common::Vector4* Matrix4x4::mutable_row_1() {
  set_has_row_1();
  if (row_1_ == NULL) row_1_ = new ::protocol::common::Vector4;
  return row_1_;
}
inline ::protocol::common::Vector4* Matrix4x4::release_row_1() {
  clear_has_row_1();
  ::protocol::common::Vector4* temp = row_1_;
  row_1_ = NULL;
  return temp;
}
inline void Matrix4x4::set_allocated_row_1(::protocol::common::Vector4* row_1) {
  delete row_1_;
  row_1_ = row_1;
  if (row_1) {
    set_has_row_1();
  } else {
    clear_has_row_1();
  }
}

// optional .protocol.common.Vector4 row_2 = 2;
inline bool Matrix4x4::has_row_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix4x4::set_has_row_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix4x4::clear_has_row_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix4x4::clear_row_2() {
  if (row_2_ != NULL) row_2_->::protocol::common::Vector4::Clear();
  clear_has_row_2();
}
inline const ::protocol::common::Vector4& Matrix4x4::row_2() const {
  return row_2_ != NULL ? *row_2_ : *default_instance_->row_2_;
}
inline ::protocol::common::Vector4* Matrix4x4::mutable_row_2() {
  set_has_row_2();
  if (row_2_ == NULL) row_2_ = new ::protocol::common::Vector4;
  return row_2_;
}
inline ::protocol::common::Vector4* Matrix4x4::release_row_2() {
  clear_has_row_2();
  ::protocol::common::Vector4* temp = row_2_;
  row_2_ = NULL;
  return temp;
}
inline void Matrix4x4::set_allocated_row_2(::protocol::common::Vector4* row_2) {
  delete row_2_;
  row_2_ = row_2;
  if (row_2) {
    set_has_row_2();
  } else {
    clear_has_row_2();
  }
}

// optional .protocol.common.Vector4 row_3 = 3;
inline bool Matrix4x4::has_row_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix4x4::set_has_row_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix4x4::clear_has_row_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix4x4::clear_row_3() {
  if (row_3_ != NULL) row_3_->::protocol::common::Vector4::Clear();
  clear_has_row_3();
}
inline const ::protocol::common::Vector4& Matrix4x4::row_3() const {
  return row_3_ != NULL ? *row_3_ : *default_instance_->row_3_;
}
inline ::protocol::common::Vector4* Matrix4x4::mutable_row_3() {
  set_has_row_3();
  if (row_3_ == NULL) row_3_ = new ::protocol::common::Vector4;
  return row_3_;
}
inline ::protocol::common::Vector4* Matrix4x4::release_row_3() {
  clear_has_row_3();
  ::protocol::common::Vector4* temp = row_3_;
  row_3_ = NULL;
  return temp;
}
inline void Matrix4x4::set_allocated_row_3(::protocol::common::Vector4* row_3) {
  delete row_3_;
  row_3_ = row_3;
  if (row_3) {
    set_has_row_3();
  } else {
    clear_has_row_3();
  }
}

// optional .protocol.common.Vector4 row_4 = 4;
inline bool Matrix4x4::has_row_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Matrix4x4::set_has_row_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Matrix4x4::clear_has_row_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Matrix4x4::clear_row_4() {
  if (row_4_ != NULL) row_4_->::protocol::common::Vector4::Clear();
  clear_has_row_4();
}
inline const ::protocol::common::Vector4& Matrix4x4::row_4() const {
  return row_4_ != NULL ? *row_4_ : *default_instance_->row_4_;
}
inline ::protocol::common::Vector4* Matrix4x4::mutable_row_4() {
  set_has_row_4();
  if (row_4_ == NULL) row_4_ = new ::protocol::common::Vector4;
  return row_4_;
}
inline ::protocol::common::Vector4* Matrix4x4::release_row_4() {
  clear_has_row_4();
  ::protocol::common::Vector4* temp = row_4_;
  row_4_ = NULL;
  return temp;
}
inline void Matrix4x4::set_allocated_row_4(::protocol::common::Vector4* row_4) {
  delete row_4_;
  row_4_ = row_4;
  if (row_4) {
    set_has_row_4();
  } else {
    clear_has_row_4();
  }
}

// -------------------------------------------------------------------

// FloatKey

// optional int64 time = 1;
inline bool FloatKey::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatKey::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatKey::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatKey::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 FloatKey::time() const {
  return time_;
}
inline void FloatKey::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional float value = 2;
inline bool FloatKey::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FloatKey::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FloatKey::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FloatKey::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FloatKey::value() const {
  return value_;
}
inline void FloatKey::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// FloatKeyframe

// optional .protocol.common.FloatKey key = 1;
inline bool FloatKeyframe::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatKeyframe::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatKeyframe::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatKeyframe::clear_key() {
  if (key_ != NULL) key_->::protocol::common::FloatKey::Clear();
  clear_has_key();
}
inline const ::protocol::common::FloatKey& FloatKeyframe::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::protocol::common::FloatKey;
  return key_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::release_key() {
  clear_has_key();
  ::protocol::common::FloatKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void FloatKeyframe::set_allocated_key(::protocol::common::FloatKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// optional .protocol.common.FloatKey cp_in = 2;
inline bool FloatKeyframe::has_cp_in() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FloatKeyframe::set_has_cp_in() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FloatKeyframe::clear_has_cp_in() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FloatKeyframe::clear_cp_in() {
  if (cp_in_ != NULL) cp_in_->::protocol::common::FloatKey::Clear();
  clear_has_cp_in();
}
inline const ::protocol::common::FloatKey& FloatKeyframe::cp_in() const {
  return cp_in_ != NULL ? *cp_in_ : *default_instance_->cp_in_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::mutable_cp_in() {
  set_has_cp_in();
  if (cp_in_ == NULL) cp_in_ = new ::protocol::common::FloatKey;
  return cp_in_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::release_cp_in() {
  clear_has_cp_in();
  ::protocol::common::FloatKey* temp = cp_in_;
  cp_in_ = NULL;
  return temp;
}
inline void FloatKeyframe::set_allocated_cp_in(::protocol::common::FloatKey* cp_in) {
  delete cp_in_;
  cp_in_ = cp_in;
  if (cp_in) {
    set_has_cp_in();
  } else {
    clear_has_cp_in();
  }
}

// optional .protocol.common.FloatKey cp_out = 3;
inline bool FloatKeyframe::has_cp_out() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FloatKeyframe::set_has_cp_out() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FloatKeyframe::clear_has_cp_out() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FloatKeyframe::clear_cp_out() {
  if (cp_out_ != NULL) cp_out_->::protocol::common::FloatKey::Clear();
  clear_has_cp_out();
}
inline const ::protocol::common::FloatKey& FloatKeyframe::cp_out() const {
  return cp_out_ != NULL ? *cp_out_ : *default_instance_->cp_out_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::mutable_cp_out() {
  set_has_cp_out();
  if (cp_out_ == NULL) cp_out_ = new ::protocol::common::FloatKey;
  return cp_out_;
}
inline ::protocol::common::FloatKey* FloatKeyframe::release_cp_out() {
  clear_has_cp_out();
  ::protocol::common::FloatKey* temp = cp_out_;
  cp_out_ = NULL;
  return temp;
}
inline void FloatKeyframe::set_allocated_cp_out(::protocol::common::FloatKey* cp_out) {
  delete cp_out_;
  cp_out_ = cp_out;
  if (cp_out) {
    set_has_cp_out();
  } else {
    clear_has_cp_out();
  }
}

// -------------------------------------------------------------------

// FloatAnim

// optional uint32 type = 1 [default = 2];
inline bool FloatAnim::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatAnim::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatAnim::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatAnim::clear_type() {
  type_ = 2u;
  clear_has_type();
}
inline ::google::protobuf::uint32 FloatAnim::type() const {
  return type_;
}
inline void FloatAnim::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .protocol.common.FloatKeyframe keyframe = 2;
inline int FloatAnim::keyframe_size() const {
  return keyframe_.size();
}
inline void FloatAnim::clear_keyframe() {
  keyframe_.Clear();
}
inline const ::protocol::common::FloatKeyframe& FloatAnim::keyframe(int index) const {
  return keyframe_.Get(index);
}
inline ::protocol::common::FloatKeyframe* FloatAnim::mutable_keyframe(int index) {
  return keyframe_.Mutable(index);
}
inline ::protocol::common::FloatKeyframe* FloatAnim::add_keyframe() {
  return keyframe_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::common::FloatKeyframe >&
FloatAnim::keyframe() const {
  return keyframe_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::common::FloatKeyframe >*
FloatAnim::mutable_keyframe() {
  return &keyframe_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
