// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: effect_settings.proto

#ifndef PROTOBUF_effect_5fsettings_2eproto__INCLUDED
#define PROTOBUF_effect_5fsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "effect_settings_plexus.pb.h"
#include "effect_settings_generator.pb.h"
#include "effect_settings_particle.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {
namespace effect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_effect_5fsettings_2eproto();
void protobuf_AssignDesc_effect_5fsettings_2eproto();
void protobuf_ShutdownFile_effect_5fsettings_2eproto();

class EffectSetting;
class EffectSettings;

enum EffectSetting_Type {
  EffectSetting_Type_Unknown = 0,
  EffectSetting_Type_Plexus = 1
};
bool EffectSetting_Type_IsValid(int value);
const EffectSetting_Type EffectSetting_Type_Type_MIN = EffectSetting_Type_Unknown;
const EffectSetting_Type EffectSetting_Type_Type_MAX = EffectSetting_Type_Plexus;
const int EffectSetting_Type_Type_ARRAYSIZE = EffectSetting_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EffectSetting_Type_descriptor();
inline const ::std::string& EffectSetting_Type_Name(EffectSetting_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectSetting_Type_descriptor(), value);
}
inline bool EffectSetting_Type_Parse(
    const ::std::string& name, EffectSetting_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectSetting_Type>(
    EffectSetting_Type_descriptor(), name, value);
}
// ===================================================================

class EffectSetting : public ::google::protobuf::Message {
 public:
  EffectSetting();
  virtual ~EffectSetting();

  EffectSetting(const EffectSetting& from);

  inline EffectSetting& operator=(const EffectSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectSetting& default_instance();

  enum ConfigCase {
    kPlexusConfig = 100,
    kGeneratorPlaneConfig = 101,
    kGeneratorSpikyConfig = 102,
    kParticleConfig = 103,
    CONFIG_NOT_SET = 0,
  };

  void Swap(EffectSetting* other);

  // implements Message ----------------------------------------------

  EffectSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectSetting& from);
  void MergeFrom(const EffectSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EffectSetting_Type Type;
  static const Type Unknown = EffectSetting_Type_Unknown;
  static const Type Plexus = EffectSetting_Type_Plexus;
  static inline bool Type_IsValid(int value) {
    return EffectSetting_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EffectSetting_Type_Type_MIN;
  static const Type Type_MAX =
    EffectSetting_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EffectSetting_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EffectSetting_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EffectSetting_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EffectSetting_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protocol.effect.EffectSetting.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::protocol::effect::EffectSetting_Type type() const;
  inline void set_type(::protocol::effect::EffectSetting_Type value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 start_time = 5;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional .protocol.effect.plexus.PlexusConfig plexus_config = 100;
  inline bool has_plexus_config() const;
  inline void clear_plexus_config();
  static const int kPlexusConfigFieldNumber = 100;
  inline const ::protocol::effect::plexus::PlexusConfig& plexus_config() const;
  inline ::protocol::effect::plexus::PlexusConfig* mutable_plexus_config();
  inline ::protocol::effect::plexus::PlexusConfig* release_plexus_config();
  inline void set_allocated_plexus_config(::protocol::effect::plexus::PlexusConfig* plexus_config);

  // optional .protocol.effect.generator.PlaneConfig generator_plane_config = 101;
  inline bool has_generator_plane_config() const;
  inline void clear_generator_plane_config();
  static const int kGeneratorPlaneConfigFieldNumber = 101;
  inline const ::protocol::effect::generator::PlaneConfig& generator_plane_config() const;
  inline ::protocol::effect::generator::PlaneConfig* mutable_generator_plane_config();
  inline ::protocol::effect::generator::PlaneConfig* release_generator_plane_config();
  inline void set_allocated_generator_plane_config(::protocol::effect::generator::PlaneConfig* generator_plane_config);

  // optional .protocol.effect.generator.SpikyConfig generator_spiky_config = 102;
  inline bool has_generator_spiky_config() const;
  inline void clear_generator_spiky_config();
  static const int kGeneratorSpikyConfigFieldNumber = 102;
  inline const ::protocol::effect::generator::SpikyConfig& generator_spiky_config() const;
  inline ::protocol::effect::generator::SpikyConfig* mutable_generator_spiky_config();
  inline ::protocol::effect::generator::SpikyConfig* release_generator_spiky_config();
  inline void set_allocated_generator_spiky_config(::protocol::effect::generator::SpikyConfig* generator_spiky_config);

  // optional .protocol.effect.particle.ParticleConfig particle_config = 103;
  inline bool has_particle_config() const;
  inline void clear_particle_config();
  static const int kParticleConfigFieldNumber = 103;
  inline const ::protocol::effect::particle::ParticleConfig& particle_config() const;
  inline ::protocol::effect::particle::ParticleConfig* mutable_particle_config();
  inline ::protocol::effect::particle::ParticleConfig* release_particle_config();
  inline void set_allocated_particle_config(::protocol::effect::particle::ParticleConfig* particle_config);

  inline ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:protocol.effect.EffectSetting)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_plexus_config();
  inline void set_has_generator_plane_config();
  inline void set_has_generator_spiky_config();
  inline void set_has_particle_config();

  inline bool has_config();
  void clear_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 end_time_;
  union ConfigUnion {
    ::protocol::effect::plexus::PlexusConfig* plexus_config_;
    ::protocol::effect::generator::PlaneConfig* generator_plane_config_;
    ::protocol::effect::generator::SpikyConfig* generator_spiky_config_;
    ::protocol::effect::particle::ParticleConfig* particle_config_;
  } config_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_effect_5fsettings_2eproto();
  friend void protobuf_AssignDesc_effect_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_effect_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static EffectSetting* default_instance_;
};
// -------------------------------------------------------------------

class EffectSettings : public ::google::protobuf::Message {
 public:
  EffectSettings();
  virtual ~EffectSettings();

  EffectSettings(const EffectSettings& from);

  inline EffectSettings& operator=(const EffectSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectSettings& default_instance();

  void Swap(EffectSettings* other);

  // implements Message ----------------------------------------------

  EffectSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectSettings& from);
  void MergeFrom(const EffectSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.effect.EffectSetting effect_setting = 1;
  inline int effect_setting_size() const;
  inline void clear_effect_setting();
  static const int kEffectSettingFieldNumber = 1;
  inline const ::protocol::effect::EffectSetting& effect_setting(int index) const;
  inline ::protocol::effect::EffectSetting* mutable_effect_setting(int index);
  inline ::protocol::effect::EffectSetting* add_effect_setting();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::effect::EffectSetting >&
      effect_setting() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::effect::EffectSetting >*
      mutable_effect_setting();

  // optional string soundtrack = 2;
  inline bool has_soundtrack() const;
  inline void clear_soundtrack();
  static const int kSoundtrackFieldNumber = 2;
  inline const ::std::string& soundtrack() const;
  inline void set_soundtrack(const ::std::string& value);
  inline void set_soundtrack(const char* value);
  inline void set_soundtrack(const char* value, size_t size);
  inline ::std::string* mutable_soundtrack();
  inline ::std::string* release_soundtrack();
  inline void set_allocated_soundtrack(::std::string* soundtrack);

  // @@protoc_insertion_point(class_scope:protocol.effect.EffectSettings)
 private:
  inline void set_has_soundtrack();
  inline void clear_has_soundtrack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::effect::EffectSetting > effect_setting_;
  ::std::string* soundtrack_;
  friend void  protobuf_AddDesc_effect_5fsettings_2eproto();
  friend void protobuf_AssignDesc_effect_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_effect_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static EffectSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectSetting

// optional .protocol.effect.EffectSetting.Type type = 1;
inline bool EffectSetting::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectSetting::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectSetting::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectSetting::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protocol::effect::EffectSetting_Type EffectSetting::type() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSetting.type)
  return static_cast< ::protocol::effect::EffectSetting_Type >(type_);
}
inline void EffectSetting::set_type(::protocol::effect::EffectSetting_Type value) {
  assert(::protocol::effect::EffectSetting_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSetting.type)
}

// optional uint32 id = 3;
inline bool EffectSetting::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSetting::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSetting::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSetting::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EffectSetting::id() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSetting.id)
  return id_;
}
inline void EffectSetting::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSetting.id)
}

// optional string name = 4;
inline bool EffectSetting::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectSetting::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectSetting::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectSetting::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EffectSetting::name() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSetting.name)
  return *name_;
}
inline void EffectSetting::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSetting.name)
}
inline void EffectSetting::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.effect.EffectSetting.name)
}
inline void EffectSetting::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.effect.EffectSetting.name)
}
inline ::std::string* EffectSetting::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.effect.EffectSetting.name)
  return name_;
}
inline ::std::string* EffectSetting::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EffectSetting::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.effect.EffectSetting.name)
}

// optional uint32 start_time = 5;
inline bool EffectSetting::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectSetting::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectSetting::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectSetting::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 EffectSetting::start_time() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSetting.start_time)
  return start_time_;
}
inline void EffectSetting::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSetting.start_time)
}

// optional uint32 end_time = 6;
inline bool EffectSetting::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EffectSetting::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EffectSetting::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EffectSetting::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 EffectSetting::end_time() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSetting.end_time)
  return end_time_;
}
inline void EffectSetting::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSetting.end_time)
}

// optional .protocol.effect.plexus.PlexusConfig plexus_config = 100;
inline bool EffectSetting::has_plexus_config() const {
  return config_case() == kPlexusConfig;
}
inline void EffectSetting::set_has_plexus_config() {
  _oneof_case_[0] = kPlexusConfig;
}
inline void EffectSetting::clear_plexus_config() {
  if (has_plexus_config()) {
    delete config_.plexus_config_;
    clear_has_config();
  }
}
inline const ::protocol::effect::plexus::PlexusConfig& EffectSetting::plexus_config() const {
  return has_plexus_config() ? *config_.plexus_config_
                      : ::protocol::effect::plexus::PlexusConfig::default_instance();
}
inline ::protocol::effect::plexus::PlexusConfig* EffectSetting::mutable_plexus_config() {
  if (!has_plexus_config()) {
    clear_config();
    set_has_plexus_config();
    config_.plexus_config_ = new ::protocol::effect::plexus::PlexusConfig;
  }
  return config_.plexus_config_;
}
inline ::protocol::effect::plexus::PlexusConfig* EffectSetting::release_plexus_config() {
  if (has_plexus_config()) {
    clear_has_config();
    ::protocol::effect::plexus::PlexusConfig* temp = config_.plexus_config_;
    config_.plexus_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void EffectSetting::set_allocated_plexus_config(::protocol::effect::plexus::PlexusConfig* plexus_config) {
  clear_config();
  if (plexus_config) {
    set_has_plexus_config();
    config_.plexus_config_ = plexus_config;
  }
}

// optional .protocol.effect.generator.PlaneConfig generator_plane_config = 101;
inline bool EffectSetting::has_generator_plane_config() const {
  return config_case() == kGeneratorPlaneConfig;
}
inline void EffectSetting::set_has_generator_plane_config() {
  _oneof_case_[0] = kGeneratorPlaneConfig;
}
inline void EffectSetting::clear_generator_plane_config() {
  if (has_generator_plane_config()) {
    delete config_.generator_plane_config_;
    clear_has_config();
  }
}
inline const ::protocol::effect::generator::PlaneConfig& EffectSetting::generator_plane_config() const {
  return has_generator_plane_config() ? *config_.generator_plane_config_
                      : ::protocol::effect::generator::PlaneConfig::default_instance();
}
inline ::protocol::effect::generator::PlaneConfig* EffectSetting::mutable_generator_plane_config() {
  if (!has_generator_plane_config()) {
    clear_config();
    set_has_generator_plane_config();
    config_.generator_plane_config_ = new ::protocol::effect::generator::PlaneConfig;
  }
  return config_.generator_plane_config_;
}
inline ::protocol::effect::generator::PlaneConfig* EffectSetting::release_generator_plane_config() {
  if (has_generator_plane_config()) {
    clear_has_config();
    ::protocol::effect::generator::PlaneConfig* temp = config_.generator_plane_config_;
    config_.generator_plane_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void EffectSetting::set_allocated_generator_plane_config(::protocol::effect::generator::PlaneConfig* generator_plane_config) {
  clear_config();
  if (generator_plane_config) {
    set_has_generator_plane_config();
    config_.generator_plane_config_ = generator_plane_config;
  }
}

// optional .protocol.effect.generator.SpikyConfig generator_spiky_config = 102;
inline bool EffectSetting::has_generator_spiky_config() const {
  return config_case() == kGeneratorSpikyConfig;
}
inline void EffectSetting::set_has_generator_spiky_config() {
  _oneof_case_[0] = kGeneratorSpikyConfig;
}
inline void EffectSetting::clear_generator_spiky_config() {
  if (has_generator_spiky_config()) {
    delete config_.generator_spiky_config_;
    clear_has_config();
  }
}
inline const ::protocol::effect::generator::SpikyConfig& EffectSetting::generator_spiky_config() const {
  return has_generator_spiky_config() ? *config_.generator_spiky_config_
                      : ::protocol::effect::generator::SpikyConfig::default_instance();
}
inline ::protocol::effect::generator::SpikyConfig* EffectSetting::mutable_generator_spiky_config() {
  if (!has_generator_spiky_config()) {
    clear_config();
    set_has_generator_spiky_config();
    config_.generator_spiky_config_ = new ::protocol::effect::generator::SpikyConfig;
  }
  return config_.generator_spiky_config_;
}
inline ::protocol::effect::generator::SpikyConfig* EffectSetting::release_generator_spiky_config() {
  if (has_generator_spiky_config()) {
    clear_has_config();
    ::protocol::effect::generator::SpikyConfig* temp = config_.generator_spiky_config_;
    config_.generator_spiky_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void EffectSetting::set_allocated_generator_spiky_config(::protocol::effect::generator::SpikyConfig* generator_spiky_config) {
  clear_config();
  if (generator_spiky_config) {
    set_has_generator_spiky_config();
    config_.generator_spiky_config_ = generator_spiky_config;
  }
}

// optional .protocol.effect.particle.ParticleConfig particle_config = 103;
inline bool EffectSetting::has_particle_config() const {
  return config_case() == kParticleConfig;
}
inline void EffectSetting::set_has_particle_config() {
  _oneof_case_[0] = kParticleConfig;
}
inline void EffectSetting::clear_particle_config() {
  if (has_particle_config()) {
    delete config_.particle_config_;
    clear_has_config();
  }
}
inline const ::protocol::effect::particle::ParticleConfig& EffectSetting::particle_config() const {
  return has_particle_config() ? *config_.particle_config_
                      : ::protocol::effect::particle::ParticleConfig::default_instance();
}
inline ::protocol::effect::particle::ParticleConfig* EffectSetting::mutable_particle_config() {
  if (!has_particle_config()) {
    clear_config();
    set_has_particle_config();
    config_.particle_config_ = new ::protocol::effect::particle::ParticleConfig;
  }
  return config_.particle_config_;
}
inline ::protocol::effect::particle::ParticleConfig* EffectSetting::release_particle_config() {
  if (has_particle_config()) {
    clear_has_config();
    ::protocol::effect::particle::ParticleConfig* temp = config_.particle_config_;
    config_.particle_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void EffectSetting::set_allocated_particle_config(::protocol::effect::particle::ParticleConfig* particle_config) {
  clear_config();
  if (particle_config) {
    set_has_particle_config();
    config_.particle_config_ = particle_config;
  }
}

inline bool EffectSetting::has_config() {
  return config_case() != CONFIG_NOT_SET;
}
inline void EffectSetting::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline EffectSetting::ConfigCase EffectSetting::config_case() const {
  return EffectSetting::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EffectSettings

// repeated .protocol.effect.EffectSetting effect_setting = 1;
inline int EffectSettings::effect_setting_size() const {
  return effect_setting_.size();
}
inline void EffectSettings::clear_effect_setting() {
  effect_setting_.Clear();
}
inline const ::protocol::effect::EffectSetting& EffectSettings::effect_setting(int index) const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSettings.effect_setting)
  return effect_setting_.Get(index);
}
inline ::protocol::effect::EffectSetting* EffectSettings::mutable_effect_setting(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.effect.EffectSettings.effect_setting)
  return effect_setting_.Mutable(index);
}
inline ::protocol::effect::EffectSetting* EffectSettings::add_effect_setting() {
  // @@protoc_insertion_point(field_add:protocol.effect.EffectSettings.effect_setting)
  return effect_setting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::effect::EffectSetting >&
EffectSettings::effect_setting() const {
  // @@protoc_insertion_point(field_list:protocol.effect.EffectSettings.effect_setting)
  return effect_setting_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::effect::EffectSetting >*
EffectSettings::mutable_effect_setting() {
  // @@protoc_insertion_point(field_mutable_list:protocol.effect.EffectSettings.effect_setting)
  return &effect_setting_;
}

// optional string soundtrack = 2;
inline bool EffectSettings::has_soundtrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSettings::set_has_soundtrack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSettings::clear_has_soundtrack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSettings::clear_soundtrack() {
  if (soundtrack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soundtrack_->clear();
  }
  clear_has_soundtrack();
}
inline const ::std::string& EffectSettings::soundtrack() const {
  // @@protoc_insertion_point(field_get:protocol.effect.EffectSettings.soundtrack)
  return *soundtrack_;
}
inline void EffectSettings::set_soundtrack(const ::std::string& value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.effect.EffectSettings.soundtrack)
}
inline void EffectSettings::set_soundtrack(const char* value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.effect.EffectSettings.soundtrack)
}
inline void EffectSettings::set_soundtrack(const char* value, size_t size) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.effect.EffectSettings.soundtrack)
}
inline ::std::string* EffectSettings::mutable_soundtrack() {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soundtrack_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.effect.EffectSettings.soundtrack)
  return soundtrack_;
}
inline ::std::string* EffectSettings::release_soundtrack() {
  clear_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soundtrack_;
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EffectSettings::set_allocated_soundtrack(::std::string* soundtrack) {
  if (soundtrack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soundtrack_;
  }
  if (soundtrack) {
    set_has_soundtrack();
    soundtrack_ = soundtrack;
  } else {
    clear_has_soundtrack();
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.effect.EffectSettings.soundtrack)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace effect
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::effect::EffectSetting_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::effect::EffectSetting_Type>() {
  return ::protocol::effect::EffectSetting_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_effect_5fsettings_2eproto__INCLUDED
