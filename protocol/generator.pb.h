// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generator.proto

#ifndef PROTOBUF_generator_2eproto__INCLUDED
#define PROTOBUF_generator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "anttweak.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace generator {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_generator_2eproto();
void protobuf_AssignDesc_generator_2eproto();
void protobuf_ShutdownFile_generator_2eproto();

class Config;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float radius = 1;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 1;
  inline float radius() const;
  inline void set_radius(float value);

  // optional float height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline float height() const;
  inline void set_height(float value);

  // optional uint32 radial_segments = 3;
  inline bool has_radial_segments() const;
  inline void clear_radial_segments();
  static const int kRadialSegmentsFieldNumber = 3;
  inline ::google::protobuf::uint32 radial_segments() const;
  inline void set_radial_segments(::google::protobuf::uint32 value);

  // optional uint32 height_segments = 4;
  inline bool has_height_segments() const;
  inline void clear_height_segments();
  static const int kHeightSegmentsFieldNumber = 4;
  inline ::google::protobuf::uint32 height_segments() const;
  inline void set_height_segments(::google::protobuf::uint32 value);

  // optional .common.Vector3 camera_pos = 5;
  inline bool has_camera_pos() const;
  inline void clear_camera_pos();
  static const int kCameraPosFieldNumber = 5;
  inline const ::common::Vector3& camera_pos() const;
  inline ::common::Vector3* mutable_camera_pos();
  inline ::common::Vector3* release_camera_pos();
  inline void set_allocated_camera_pos(::common::Vector3* camera_pos);

  // optional .common.Vector3 camera_target = 6;
  inline bool has_camera_target() const;
  inline void clear_camera_target();
  static const int kCameraTargetFieldNumber = 6;
  inline const ::common::Vector3& camera_target() const;
  inline ::common::Vector3* mutable_camera_target();
  inline ::common::Vector3* release_camera_target();
  inline void set_allocated_camera_target(::common::Vector3* camera_target);

  // optional .common.Matrix4x4 obj_world = 7;
  inline bool has_obj_world() const;
  inline void clear_obj_world();
  static const int kObjWorldFieldNumber = 7;
  inline const ::common::Matrix4x4& obj_world() const;
  inline ::common::Matrix4x4* mutable_obj_world();
  inline ::common::Matrix4x4* release_obj_world();
  inline void set_allocated_obj_world(::common::Matrix4x4* obj_world);

  // @@protoc_insertion_point(class_scope:generator.Config)
 private:
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radial_segments();
  inline void clear_has_radial_segments();
  inline void set_has_height_segments();
  inline void clear_has_height_segments();
  inline void set_has_camera_pos();
  inline void clear_has_camera_pos();
  inline void set_has_camera_target();
  inline void clear_has_camera_target();
  inline void set_has_obj_world();
  inline void clear_has_obj_world();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float radius_;
  float height_;
  ::google::protobuf::uint32 radial_segments_;
  ::google::protobuf::uint32 height_segments_;
  ::common::Vector3* camera_pos_;
  ::common::Vector3* camera_target_;
  ::common::Matrix4x4* obj_world_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_generator_2eproto();
  friend void protobuf_AssignDesc_generator_2eproto();
  friend void protobuf_ShutdownFile_generator_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional float radius = 1;
inline bool Config::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float Config::radius() const {
  return radius_;
}
inline void Config::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional float height = 2;
inline bool Config::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Config::height() const {
  return height_;
}
inline void Config::set_height(float value) {
  set_has_height();
  height_ = value;
}

// optional uint32 radial_segments = 3;
inline bool Config::has_radial_segments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_radial_segments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_radial_segments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_radial_segments() {
  radial_segments_ = 0u;
  clear_has_radial_segments();
}
inline ::google::protobuf::uint32 Config::radial_segments() const {
  return radial_segments_;
}
inline void Config::set_radial_segments(::google::protobuf::uint32 value) {
  set_has_radial_segments();
  radial_segments_ = value;
}

// optional uint32 height_segments = 4;
inline bool Config::has_height_segments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_height_segments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_height_segments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_height_segments() {
  height_segments_ = 0u;
  clear_has_height_segments();
}
inline ::google::protobuf::uint32 Config::height_segments() const {
  return height_segments_;
}
inline void Config::set_height_segments(::google::protobuf::uint32 value) {
  set_has_height_segments();
  height_segments_ = value;
}

// optional .common.Vector3 camera_pos = 5;
inline bool Config::has_camera_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_camera_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_camera_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_camera_pos() {
  if (camera_pos_ != NULL) camera_pos_->::common::Vector3::Clear();
  clear_has_camera_pos();
}
inline const ::common::Vector3& Config::camera_pos() const {
  return camera_pos_ != NULL ? *camera_pos_ : *default_instance_->camera_pos_;
}
inline ::common::Vector3* Config::mutable_camera_pos() {
  set_has_camera_pos();
  if (camera_pos_ == NULL) camera_pos_ = new ::common::Vector3;
  return camera_pos_;
}
inline ::common::Vector3* Config::release_camera_pos() {
  clear_has_camera_pos();
  ::common::Vector3* temp = camera_pos_;
  camera_pos_ = NULL;
  return temp;
}
inline void Config::set_allocated_camera_pos(::common::Vector3* camera_pos) {
  delete camera_pos_;
  camera_pos_ = camera_pos;
  if (camera_pos) {
    set_has_camera_pos();
  } else {
    clear_has_camera_pos();
  }
}

// optional .common.Vector3 camera_target = 6;
inline bool Config::has_camera_target() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_camera_target() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_camera_target() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_camera_target() {
  if (camera_target_ != NULL) camera_target_->::common::Vector3::Clear();
  clear_has_camera_target();
}
inline const ::common::Vector3& Config::camera_target() const {
  return camera_target_ != NULL ? *camera_target_ : *default_instance_->camera_target_;
}
inline ::common::Vector3* Config::mutable_camera_target() {
  set_has_camera_target();
  if (camera_target_ == NULL) camera_target_ = new ::common::Vector3;
  return camera_target_;
}
inline ::common::Vector3* Config::release_camera_target() {
  clear_has_camera_target();
  ::common::Vector3* temp = camera_target_;
  camera_target_ = NULL;
  return temp;
}
inline void Config::set_allocated_camera_target(::common::Vector3* camera_target) {
  delete camera_target_;
  camera_target_ = camera_target;
  if (camera_target) {
    set_has_camera_target();
  } else {
    clear_has_camera_target();
  }
}

// optional .common.Matrix4x4 obj_world = 7;
inline bool Config::has_obj_world() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_obj_world() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_obj_world() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_obj_world() {
  if (obj_world_ != NULL) obj_world_->::common::Matrix4x4::Clear();
  clear_has_obj_world();
}
inline const ::common::Matrix4x4& Config::obj_world() const {
  return obj_world_ != NULL ? *obj_world_ : *default_instance_->obj_world_;
}
inline ::common::Matrix4x4* Config::mutable_obj_world() {
  set_has_obj_world();
  if (obj_world_ == NULL) obj_world_ = new ::common::Matrix4x4;
  return obj_world_;
}
inline ::common::Matrix4x4* Config::release_obj_world() {
  clear_has_obj_world();
  ::common::Matrix4x4* temp = obj_world_;
  obj_world_ = NULL;
  return temp;
}
inline void Config::set_allocated_obj_world(::common::Matrix4x4* obj_world) {
  delete obj_world_;
  obj_world_ = obj_world;
  if (obj_world) {
    set_has_obj_world();
  } else {
    clear_has_obj_world();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace generator

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_generator_2eproto__INCLUDED
