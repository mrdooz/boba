// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "generator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace generator {

namespace {

const ::google::protobuf::Descriptor* Spiky_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spiky_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plane_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_generator_2eproto() {
  protobuf_AddDesc_generator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "generator.proto");
  GOOGLE_CHECK(file != NULL);
  Spiky_descriptor_ = file->message_type(0);
  static const int Spiky_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, radial_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, height_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, camera_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, camera_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, obj_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, obj_r_),
  };
  Spiky_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spiky_descriptor_,
      Spiky::default_instance_,
      Spiky_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spiky, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spiky));
  Plane_descriptor_ = file->message_type(1);
  static const int Plane_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, width_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, height_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, camera_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, camera_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, obj_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, obj_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, ofs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, blur_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, bloom_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, bloom_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, transpose_),
  };
  Plane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plane_descriptor_,
      Plane::default_instance_,
      Plane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plane));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_generator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spiky_descriptor_, &Spiky::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plane_descriptor_, &Plane::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_generator_2eproto() {
  delete Spiky::default_instance_;
  delete Spiky_reflection_;
  delete Plane::default_instance_;
  delete Plane_reflection_;
}

void protobuf_AddDesc_generator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::anttweak::protobuf_AddDesc_anttweak_2eproto();
  ::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017generator.proto\022\tgenerator\032\016anttweak.p"
    "roto\032\014common.proto\"\203\002\n\005Spiky\022\016\n\006radius\030\001"
    " \001(\002\022\016\n\006height\030\002 \001(\002\022\027\n\017radial_segments\030"
    "\003 \001(\r\022\027\n\017height_segments\030\004 \001(\r\022)\n\ncamera"
    "_pos\030\005 \001(\0132\017.common.Vector3B\004\230\265\030\001\022)\n\ncam"
    "era_dir\030\006 \001(\0132\017.common.Vector3B\004\230\265\030\001\022$\n\005"
    "obj_t\030\007 \001(\0132\017.common.Vector3B\004\230\265\030\001\022&\n\005ob"
    "j_r\030\010 \001(\0132\021.common.Matrix4x4B\004\230\265\030\001:\004\360\266\030\001"
    "\"\260\004\n\005Plane\022\r\n\005width\030\001 \001(\002\022\016\n\006height\030\002 \001("
    "\002\022\026\n\016width_segments\030\003 \001(\r\022\027\n\017height_segm"
    "ents\030\004 \001(\r\022)\n\ncamera_pos\030\005 \001(\0132\017.common."
    "Vector3B\004\230\265\030\001\022)\n\ncamera_dir\030\006 \001(\0132\017.comm"
    "on.Vector3B\004\230\265\030\001\022$\n\005obj_t\030\007 \001(\0132\017.common"
    ".Vector3B\004\230\265\030\001\022&\n\005obj_r\030\010 \001(\0132\021.common.M"
    "atrix4x4B\004\230\265\030\001\022\'\n\003tau\030\t \001(\002:\0030.5B\025\245\265\030\n\327#"
    "<\255\265\030\000\000\000@\265\265\030\n\327#<\022(\n\003key\030\n \001(\002:\0040.18B\025\245\265\030\n"
    "\327#<\255\265\030\000\000\200\?\265\265\030\n\327#<\022(\n\003ofs\030\013 \001(\002:\0040.18B\025\245\265"
    "\030\n\327#<\255\265\030\000\000\200\?\265\265\030\n\327#<\022.\n\013blur_radius\030\014 \001(\002"
    ":\00210B\025\245\265\030\000\000\000\000\255\265\030\000\000HC\265\265\030\000\000\200\?\0223\n\017bloom_thr"
    "eshold\030\r \001(\002:\0030.8B\025\245\265\030\000\000\000\000\255\265\030\000\000\200\?\265\265\030\n\327#<"
    "\0222\n\020bloom_multiplier\030\016 \001(\002:\0011B\025\245\265\030\000\000\000\000\255\265"
    "\030\000\000\240@\265\265\030\315\314\314=\022\027\n\ttranspose\030\017 \001(\010:\004true:\004\360"
    "\266\030\001", 883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "generator.proto", &protobuf_RegisterTypes);
  Spiky::default_instance_ = new Spiky();
  Plane::default_instance_ = new Plane();
  Spiky::default_instance_->InitAsDefaultInstance();
  Plane::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_generator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_generator_2eproto {
  StaticDescriptorInitializer_generator_2eproto() {
    protobuf_AddDesc_generator_2eproto();
  }
} static_descriptor_initializer_generator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Spiky::kRadiusFieldNumber;
const int Spiky::kHeightFieldNumber;
const int Spiky::kRadialSegmentsFieldNumber;
const int Spiky::kHeightSegmentsFieldNumber;
const int Spiky::kCameraPosFieldNumber;
const int Spiky::kCameraDirFieldNumber;
const int Spiky::kObjTFieldNumber;
const int Spiky::kObjRFieldNumber;
#endif  // !_MSC_VER

Spiky::Spiky()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spiky::InitAsDefaultInstance() {
  camera_pos_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  camera_dir_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  obj_t_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  obj_r_ = const_cast< ::common::Matrix4x4*>(&::common::Matrix4x4::default_instance());
}

Spiky::Spiky(const Spiky& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spiky::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  height_ = 0;
  radial_segments_ = 0u;
  height_segments_ = 0u;
  camera_pos_ = NULL;
  camera_dir_ = NULL;
  obj_t_ = NULL;
  obj_r_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spiky::~Spiky() {
  SharedDtor();
}

void Spiky::SharedDtor() {
  if (this != default_instance_) {
    delete camera_pos_;
    delete camera_dir_;
    delete obj_t_;
    delete obj_r_;
  }
}

void Spiky::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spiky::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spiky_descriptor_;
}

const Spiky& Spiky::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_generator_2eproto();
  return *default_instance_;
}

Spiky* Spiky::default_instance_ = NULL;

Spiky* Spiky::New() const {
  return new Spiky;
}

void Spiky::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radius_ = 0;
    height_ = 0;
    radial_segments_ = 0u;
    height_segments_ = 0u;
    if (has_camera_pos()) {
      if (camera_pos_ != NULL) camera_pos_->::common::Vector3::Clear();
    }
    if (has_camera_dir()) {
      if (camera_dir_ != NULL) camera_dir_->::common::Vector3::Clear();
    }
    if (has_obj_t()) {
      if (obj_t_ != NULL) obj_t_->::common::Vector3::Clear();
    }
    if (has_obj_r()) {
      if (obj_r_ != NULL) obj_r_->::common::Matrix4x4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spiky::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float radius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_radial_segments;
        break;
      }

      // optional uint32 radial_segments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radial_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radial_segments_)));
          set_has_radial_segments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height_segments;
        break;
      }

      // optional uint32 height_segments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_segments_)));
          set_has_height_segments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_camera_pos;
        break;
      }

      // optional .common.Vector3 camera_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera_dir;
        break;
      }

      // optional .common.Vector3 camera_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obj_t;
        break;
      }

      // optional .common.Vector3 obj_t = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_obj_r;
        break;
      }

      // optional .common.Matrix4x4 obj_r = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_r:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj_r()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spiky::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional uint32 radial_segments = 3;
  if (has_radial_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->radial_segments(), output);
  }

  // optional uint32 height_segments = 4;
  if (has_height_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height_segments(), output);
  }

  // optional .common.Vector3 camera_pos = 5;
  if (has_camera_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_pos(), output);
  }

  // optional .common.Vector3 camera_dir = 6;
  if (has_camera_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->camera_dir(), output);
  }

  // optional .common.Vector3 obj_t = 7;
  if (has_obj_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obj_t(), output);
  }

  // optional .common.Matrix4x4 obj_r = 8;
  if (has_obj_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->obj_r(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spiky::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // optional float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional uint32 radial_segments = 3;
  if (has_radial_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->radial_segments(), target);
  }

  // optional uint32 height_segments = 4;
  if (has_height_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height_segments(), target);
  }

  // optional .common.Vector3 camera_pos = 5;
  if (has_camera_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_pos(), target);
  }

  // optional .common.Vector3 camera_dir = 6;
  if (has_camera_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->camera_dir(), target);
  }

  // optional .common.Vector3 obj_t = 7;
  if (has_obj_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obj_t(), target);
  }

  // optional .common.Matrix4x4 obj_r = 8;
  if (has_obj_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->obj_r(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spiky::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float radius = 1;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 radial_segments = 3;
    if (has_radial_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radial_segments());
    }

    // optional uint32 height_segments = 4;
    if (has_height_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height_segments());
    }

    // optional .common.Vector3 camera_pos = 5;
    if (has_camera_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_pos());
    }

    // optional .common.Vector3 camera_dir = 6;
    if (has_camera_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_dir());
    }

    // optional .common.Vector3 obj_t = 7;
    if (has_obj_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_t());
    }

    // optional .common.Matrix4x4 obj_r = 8;
    if (has_obj_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_r());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spiky::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spiky* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spiky*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spiky::MergeFrom(const Spiky& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radial_segments()) {
      set_radial_segments(from.radial_segments());
    }
    if (from.has_height_segments()) {
      set_height_segments(from.height_segments());
    }
    if (from.has_camera_pos()) {
      mutable_camera_pos()->::common::Vector3::MergeFrom(from.camera_pos());
    }
    if (from.has_camera_dir()) {
      mutable_camera_dir()->::common::Vector3::MergeFrom(from.camera_dir());
    }
    if (from.has_obj_t()) {
      mutable_obj_t()->::common::Vector3::MergeFrom(from.obj_t());
    }
    if (from.has_obj_r()) {
      mutable_obj_r()->::common::Matrix4x4::MergeFrom(from.obj_r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spiky::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spiky::CopyFrom(const Spiky& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spiky::IsInitialized() const {

  return true;
}

void Spiky::Swap(Spiky* other) {
  if (other != this) {
    std::swap(radius_, other->radius_);
    std::swap(height_, other->height_);
    std::swap(radial_segments_, other->radial_segments_);
    std::swap(height_segments_, other->height_segments_);
    std::swap(camera_pos_, other->camera_pos_);
    std::swap(camera_dir_, other->camera_dir_);
    std::swap(obj_t_, other->obj_t_);
    std::swap(obj_r_, other->obj_r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spiky::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spiky_descriptor_;
  metadata.reflection = Spiky_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plane::kWidthFieldNumber;
const int Plane::kHeightFieldNumber;
const int Plane::kWidthSegmentsFieldNumber;
const int Plane::kHeightSegmentsFieldNumber;
const int Plane::kCameraPosFieldNumber;
const int Plane::kCameraDirFieldNumber;
const int Plane::kObjTFieldNumber;
const int Plane::kObjRFieldNumber;
const int Plane::kTauFieldNumber;
const int Plane::kKeyFieldNumber;
const int Plane::kOfsFieldNumber;
const int Plane::kBlurRadiusFieldNumber;
const int Plane::kBloomThresholdFieldNumber;
const int Plane::kBloomMultiplierFieldNumber;
const int Plane::kTransposeFieldNumber;
#endif  // !_MSC_VER

Plane::Plane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plane::InitAsDefaultInstance() {
  camera_pos_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  camera_dir_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  obj_t_ = const_cast< ::common::Vector3*>(&::common::Vector3::default_instance());
  obj_r_ = const_cast< ::common::Matrix4x4*>(&::common::Matrix4x4::default_instance());
}

Plane::Plane(const Plane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plane::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  width_segments_ = 0u;
  height_segments_ = 0u;
  camera_pos_ = NULL;
  camera_dir_ = NULL;
  obj_t_ = NULL;
  obj_r_ = NULL;
  tau_ = 0.5f;
  key_ = 0.18f;
  ofs_ = 0.18f;
  blur_radius_ = 10;
  bloom_threshold_ = 0.8f;
  bloom_multiplier_ = 1;
  transpose_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plane::~Plane() {
  SharedDtor();
}

void Plane::SharedDtor() {
  if (this != default_instance_) {
    delete camera_pos_;
    delete camera_dir_;
    delete obj_t_;
    delete obj_r_;
  }
}

void Plane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plane_descriptor_;
}

const Plane& Plane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_generator_2eproto();
  return *default_instance_;
}

Plane* Plane::default_instance_ = NULL;

Plane* Plane::New() const {
  return new Plane;
}

void Plane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    width_segments_ = 0u;
    height_segments_ = 0u;
    if (has_camera_pos()) {
      if (camera_pos_ != NULL) camera_pos_->::common::Vector3::Clear();
    }
    if (has_camera_dir()) {
      if (camera_dir_ != NULL) camera_dir_->::common::Vector3::Clear();
    }
    if (has_obj_t()) {
      if (obj_t_ != NULL) obj_t_->::common::Vector3::Clear();
    }
    if (has_obj_r()) {
      if (obj_r_ != NULL) obj_r_->::common::Matrix4x4::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tau_ = 0.5f;
    key_ = 0.18f;
    ofs_ = 0.18f;
    blur_radius_ = 10;
    bloom_threshold_ = 0.8f;
    bloom_multiplier_ = 1;
    transpose_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width_segments;
        break;
      }

      // optional uint32 width_segments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_segments_)));
          set_has_width_segments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height_segments;
        break;
      }

      // optional uint32 height_segments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height_segments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_segments_)));
          set_has_height_segments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_camera_pos;
        break;
      }

      // optional .common.Vector3 camera_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera_dir;
        break;
      }

      // optional .common.Vector3 camera_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obj_t;
        break;
      }

      // optional .common.Vector3 obj_t = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_obj_r;
        break;
      }

      // optional .common.Matrix4x4 obj_r = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_r:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj_r()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_tau;
        break;
      }

      // optional float tau = 9 [default = 0.5];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_key;
        break;
      }

      // optional float key = 10 [default = 0.18];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ofs;
        break;
      }

      // optional float ofs = 11 [default = 0.18];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ofs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ofs_)));
          set_has_ofs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_blur_radius;
        break;
      }

      // optional float blur_radius = 12 [default = 10];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blur_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blur_radius_)));
          set_has_blur_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_bloom_threshold;
        break;
      }

      // optional float bloom_threshold = 13 [default = 0.8];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bloom_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bloom_threshold_)));
          set_has_bloom_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_bloom_multiplier;
        break;
      }

      // optional float bloom_multiplier = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bloom_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bloom_multiplier_)));
          set_has_bloom_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 15 [default = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional uint32 width_segments = 3;
  if (has_width_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width_segments(), output);
  }

  // optional uint32 height_segments = 4;
  if (has_height_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height_segments(), output);
  }

  // optional .common.Vector3 camera_pos = 5;
  if (has_camera_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_pos(), output);
  }

  // optional .common.Vector3 camera_dir = 6;
  if (has_camera_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->camera_dir(), output);
  }

  // optional .common.Vector3 obj_t = 7;
  if (has_obj_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obj_t(), output);
  }

  // optional .common.Matrix4x4 obj_r = 8;
  if (has_obj_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->obj_r(), output);
  }

  // optional float tau = 9 [default = 0.5];
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tau(), output);
  }

  // optional float key = 10 [default = 0.18];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->key(), output);
  }

  // optional float ofs = 11 [default = 0.18];
  if (has_ofs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ofs(), output);
  }

  // optional float blur_radius = 12 [default = 10];
  if (has_blur_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->blur_radius(), output);
  }

  // optional float bloom_threshold = 13 [default = 0.8];
  if (has_bloom_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->bloom_threshold(), output);
  }

  // optional float bloom_multiplier = 14 [default = 1];
  if (has_bloom_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->bloom_multiplier(), output);
  }

  // optional bool transpose = 15 [default = true];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->transpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // optional float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional uint32 width_segments = 3;
  if (has_width_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width_segments(), target);
  }

  // optional uint32 height_segments = 4;
  if (has_height_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height_segments(), target);
  }

  // optional .common.Vector3 camera_pos = 5;
  if (has_camera_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_pos(), target);
  }

  // optional .common.Vector3 camera_dir = 6;
  if (has_camera_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->camera_dir(), target);
  }

  // optional .common.Vector3 obj_t = 7;
  if (has_obj_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obj_t(), target);
  }

  // optional .common.Matrix4x4 obj_r = 8;
  if (has_obj_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->obj_r(), target);
  }

  // optional float tau = 9 [default = 0.5];
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tau(), target);
  }

  // optional float key = 10 [default = 0.18];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->key(), target);
  }

  // optional float ofs = 11 [default = 0.18];
  if (has_ofs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ofs(), target);
  }

  // optional float blur_radius = 12 [default = 10];
  if (has_blur_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->blur_radius(), target);
  }

  // optional float bloom_threshold = 13 [default = 0.8];
  if (has_bloom_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->bloom_threshold(), target);
  }

  // optional float bloom_multiplier = 14 [default = 1];
  if (has_bloom_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->bloom_multiplier(), target);
  }

  // optional bool transpose = 15 [default = true];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->transpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 width_segments = 3;
    if (has_width_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width_segments());
    }

    // optional uint32 height_segments = 4;
    if (has_height_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height_segments());
    }

    // optional .common.Vector3 camera_pos = 5;
    if (has_camera_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_pos());
    }

    // optional .common.Vector3 camera_dir = 6;
    if (has_camera_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_dir());
    }

    // optional .common.Vector3 obj_t = 7;
    if (has_obj_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_t());
    }

    // optional .common.Matrix4x4 obj_r = 8;
    if (has_obj_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj_r());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tau = 9 [default = 0.5];
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float key = 10 [default = 0.18];
    if (has_key()) {
      total_size += 1 + 4;
    }

    // optional float ofs = 11 [default = 0.18];
    if (has_ofs()) {
      total_size += 1 + 4;
    }

    // optional float blur_radius = 12 [default = 10];
    if (has_blur_radius()) {
      total_size += 1 + 4;
    }

    // optional float bloom_threshold = 13 [default = 0.8];
    if (has_bloom_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bloom_multiplier = 14 [default = 1];
    if (has_bloom_multiplier()) {
      total_size += 1 + 4;
    }

    // optional bool transpose = 15 [default = true];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plane::MergeFrom(const Plane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width_segments()) {
      set_width_segments(from.width_segments());
    }
    if (from.has_height_segments()) {
      set_height_segments(from.height_segments());
    }
    if (from.has_camera_pos()) {
      mutable_camera_pos()->::common::Vector3::MergeFrom(from.camera_pos());
    }
    if (from.has_camera_dir()) {
      mutable_camera_dir()->::common::Vector3::MergeFrom(from.camera_dir());
    }
    if (from.has_obj_t()) {
      mutable_obj_t()->::common::Vector3::MergeFrom(from.obj_t());
    }
    if (from.has_obj_r()) {
      mutable_obj_r()->::common::Matrix4x4::MergeFrom(from.obj_r());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ofs()) {
      set_ofs(from.ofs());
    }
    if (from.has_blur_radius()) {
      set_blur_radius(from.blur_radius());
    }
    if (from.has_bloom_threshold()) {
      set_bloom_threshold(from.bloom_threshold());
    }
    if (from.has_bloom_multiplier()) {
      set_bloom_multiplier(from.bloom_multiplier());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plane::CopyFrom(const Plane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane::IsInitialized() const {

  return true;
}

void Plane::Swap(Plane* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(width_segments_, other->width_segments_);
    std::swap(height_segments_, other->height_segments_);
    std::swap(camera_pos_, other->camera_pos_);
    std::swap(camera_dir_, other->camera_dir_);
    std::swap(obj_t_, other->obj_t_);
    std::swap(obj_r_, other->obj_r_);
    std::swap(tau_, other->tau_);
    std::swap(key_, other->key_);
    std::swap(ofs_, other->ofs_);
    std::swap(blur_radius_, other->blur_radius_);
    std::swap(bloom_threshold_, other->bloom_threshold_);
    std::swap(bloom_multiplier_, other->bloom_multiplier_);
    std::swap(transpose_, other->transpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plane_descriptor_;
  metadata.reflection = Plane_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace generator

// @@protoc_insertion_point(global_scope)
