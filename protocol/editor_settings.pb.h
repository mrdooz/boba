// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_settings.proto

#ifndef PROTOBUF_editor_5fsettings_2eproto__INCLUDED
#define PROTOBUF_editor_5fsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {
namespace editor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_editor_5fsettings_2eproto();
void protobuf_AssignDesc_editor_5fsettings_2eproto();
void protobuf_ShutdownFile_editor_5fsettings_2eproto();

class Settings;

// ===================================================================

class Settings : public ::google::protobuf::Message {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  void Swap(Settings* other);

  // implements Message ----------------------------------------------

  Settings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ticker_height = 1 [default = 50];
  inline bool has_ticker_height() const;
  inline void clear_ticker_height();
  static const int kTickerHeightFieldNumber = 1;
  inline ::google::protobuf::uint32 ticker_height() const;
  inline void set_ticker_height(::google::protobuf::uint32 value);

  // optional uint32 ticker_interval = 2 [default = 20];
  inline bool has_ticker_interval() const;
  inline void clear_ticker_interval();
  static const int kTickerIntervalFieldNumber = 2;
  inline ::google::protobuf::uint32 ticker_interval() const;
  inline void set_ticker_interval(::google::protobuf::uint32 value);

  // optional uint32 ticks_per_interval = 3 [default = 4];
  inline bool has_ticks_per_interval() const;
  inline void clear_ticks_per_interval();
  static const int kTicksPerIntervalFieldNumber = 3;
  inline ::google::protobuf::uint32 ticks_per_interval() const;
  inline void set_ticks_per_interval(::google::protobuf::uint32 value);

  // optional uint32 effect_view_width = 20 [default = 200];
  inline bool has_effect_view_width() const;
  inline void clear_effect_view_width();
  static const int kEffectViewWidthFieldNumber = 20;
  inline ::google::protobuf::uint32 effect_view_width() const;
  inline void set_effect_view_width(::google::protobuf::uint32 value);

  // optional uint32 effect_row_height = 21 [default = 20];
  inline bool has_effect_row_height() const;
  inline void clear_effect_row_height();
  static const int kEffectRowHeightFieldNumber = 21;
  inline ::google::protobuf::uint32 effect_row_height() const;
  inline void set_effect_row_height(::google::protobuf::uint32 value);

  // optional uint32 status_bar_height = 22 [default = 30];
  inline bool has_status_bar_height() const;
  inline void clear_status_bar_height();
  static const int kStatusBarHeightFieldNumber = 22;
  inline ::google::protobuf::uint32 status_bar_height() const;
  inline void set_status_bar_height(::google::protobuf::uint32 value);

  // optional uint32 effect_height = 30 [default = 40];
  inline bool has_effect_height() const;
  inline void clear_effect_height();
  static const int kEffectHeightFieldNumber = 30;
  inline ::google::protobuf::uint32 effect_height() const;
  inline void set_effect_height(::google::protobuf::uint32 value);

  // optional uint32 resize_handle = 31 [default = 6];
  inline bool has_resize_handle() const;
  inline void clear_resize_handle();
  static const int kResizeHandleFieldNumber = 31;
  inline ::google::protobuf::uint32 resize_handle() const;
  inline void set_resize_handle(::google::protobuf::uint32 value);

  // optional uint32 timeline_zoom_min = 40 [default = 16];
  inline bool has_timeline_zoom_min() const;
  inline void clear_timeline_zoom_min();
  static const int kTimelineZoomMinFieldNumber = 40;
  inline ::google::protobuf::uint32 timeline_zoom_min() const;
  inline void set_timeline_zoom_min(::google::protobuf::uint32 value);

  // optional uint32 timeline_zoom_max = 41 [default = 1024];
  inline bool has_timeline_zoom_max() const;
  inline void clear_timeline_zoom_max();
  static const int kTimelineZoomMaxFieldNumber = 41;
  inline ::google::protobuf::uint32 timeline_zoom_max() const;
  inline void set_timeline_zoom_max(::google::protobuf::uint32 value);

  // optional uint32 timeline_zoom_default = 42 [default = 128];
  inline bool has_timeline_zoom_default() const;
  inline void clear_timeline_zoom_default();
  static const int kTimelineZoomDefaultFieldNumber = 42;
  inline ::google::protobuf::uint32 timeline_zoom_default() const;
  inline void set_timeline_zoom_default(::google::protobuf::uint32 value);

  // optional uint32 keyframe_size = 50 [default = 5];
  inline bool has_keyframe_size() const;
  inline void clear_keyframe_size();
  static const int kKeyframeSizeFieldNumber = 50;
  inline ::google::protobuf::uint32 keyframe_size() const;
  inline void set_keyframe_size(::google::protobuf::uint32 value);

  // optional .protocol.common.Color4 default_row_color = 100;
  inline bool has_default_row_color() const;
  inline void clear_default_row_color();
  static const int kDefaultRowColorFieldNumber = 100;
  inline const ::protocol::common::Color4& default_row_color() const;
  inline ::protocol::common::Color4* mutable_default_row_color();
  inline ::protocol::common::Color4* release_default_row_color();
  inline void set_allocated_default_row_color(::protocol::common::Color4* default_row_color);

  // optional .protocol.common.Color4 selected_row_color = 101;
  inline bool has_selected_row_color() const;
  inline void clear_selected_row_color();
  static const int kSelectedRowColorFieldNumber = 101;
  inline const ::protocol::common::Color4& selected_row_color() const;
  inline ::protocol::common::Color4* mutable_selected_row_color();
  inline ::protocol::common::Color4* release_selected_row_color();
  inline void set_allocated_selected_row_color(::protocol::common::Color4* selected_row_color);

  // optional .protocol.common.Color4 hover_row_color = 102;
  inline bool has_hover_row_color() const;
  inline void clear_hover_row_color();
  static const int kHoverRowColorFieldNumber = 102;
  inline const ::protocol::common::Color4& hover_row_color() const;
  inline ::protocol::common::Color4* mutable_hover_row_color();
  inline ::protocol::common::Color4* release_hover_row_color();
  inline void set_allocated_hover_row_color(::protocol::common::Color4* hover_row_color);

  // optional .protocol.common.Color4 invalid_hover_row_color = 103;
  inline bool has_invalid_hover_row_color() const;
  inline void clear_invalid_hover_row_color();
  static const int kInvalidHoverRowColorFieldNumber = 103;
  inline const ::protocol::common::Color4& invalid_hover_row_color() const;
  inline ::protocol::common::Color4* mutable_invalid_hover_row_color();
  inline ::protocol::common::Color4* release_invalid_hover_row_color();
  inline void set_allocated_invalid_hover_row_color(::protocol::common::Color4* invalid_hover_row_color);

  // optional .protocol.common.Color4 default_line_color = 104;
  inline bool has_default_line_color() const;
  inline void clear_default_line_color();
  static const int kDefaultLineColorFieldNumber = 104;
  inline const ::protocol::common::Color4& default_line_color() const;
  inline ::protocol::common::Color4* mutable_default_line_color();
  inline ::protocol::common::Color4* release_default_line_color();
  inline void set_allocated_default_line_color(::protocol::common::Color4* default_line_color);

  // optional .protocol.common.Color4 effect_view_background_color = 130;
  inline bool has_effect_view_background_color() const;
  inline void clear_effect_view_background_color();
  static const int kEffectViewBackgroundColorFieldNumber = 130;
  inline const ::protocol::common::Color4& effect_view_background_color() const;
  inline ::protocol::common::Color4* mutable_effect_view_background_color();
  inline ::protocol::common::Color4* release_effect_view_background_color();
  inline void set_allocated_effect_view_background_color(::protocol::common::Color4* effect_view_background_color);

  // optional .protocol.common.Color4 effect_view_background_color_selected = 131;
  inline bool has_effect_view_background_color_selected() const;
  inline void clear_effect_view_background_color_selected();
  static const int kEffectViewBackgroundColorSelectedFieldNumber = 131;
  inline const ::protocol::common::Color4& effect_view_background_color_selected() const;
  inline ::protocol::common::Color4* mutable_effect_view_background_color_selected();
  inline ::protocol::common::Color4* release_effect_view_background_color_selected();
  inline void set_allocated_effect_view_background_color_selected(::protocol::common::Color4* effect_view_background_color_selected);

  // optional .protocol.common.Color4 timeline_view_background_color = 132;
  inline bool has_timeline_view_background_color() const;
  inline void clear_timeline_view_background_color();
  static const int kTimelineViewBackgroundColorFieldNumber = 132;
  inline const ::protocol::common::Color4& timeline_view_background_color() const;
  inline ::protocol::common::Color4* mutable_timeline_view_background_color();
  inline ::protocol::common::Color4* release_timeline_view_background_color();
  inline void set_allocated_timeline_view_background_color(::protocol::common::Color4* timeline_view_background_color);

  // optional .protocol.common.Color4 effect_line_color = 133;
  inline bool has_effect_line_color() const;
  inline void clear_effect_line_color();
  static const int kEffectLineColorFieldNumber = 133;
  inline const ::protocol::common::Color4& effect_line_color() const;
  inline ::protocol::common::Color4* mutable_effect_line_color();
  inline ::protocol::common::Color4* release_effect_line_color();
  inline void set_allocated_effect_line_color(::protocol::common::Color4* effect_line_color);

  // optional .protocol.common.Color4 keyframe_default_color = 150;
  inline bool has_keyframe_default_color() const;
  inline void clear_keyframe_default_color();
  static const int kKeyframeDefaultColorFieldNumber = 150;
  inline const ::protocol::common::Color4& keyframe_default_color() const;
  inline ::protocol::common::Color4* mutable_keyframe_default_color();
  inline ::protocol::common::Color4* release_keyframe_default_color();
  inline void set_allocated_keyframe_default_color(::protocol::common::Color4* keyframe_default_color);

  // optional .protocol.common.Color4 keyframe_selected_color = 151;
  inline bool has_keyframe_selected_color() const;
  inline void clear_keyframe_selected_color();
  static const int kKeyframeSelectedColorFieldNumber = 151;
  inline const ::protocol::common::Color4& keyframe_selected_color() const;
  inline ::protocol::common::Color4* mutable_keyframe_selected_color();
  inline ::protocol::common::Color4* release_keyframe_selected_color();
  inline void set_allocated_keyframe_selected_color(::protocol::common::Color4* keyframe_selected_color);

  // optional .protocol.common.Color4 keyframe_control_color = 152;
  inline bool has_keyframe_control_color() const;
  inline void clear_keyframe_control_color();
  static const int kKeyframeControlColorFieldNumber = 152;
  inline const ::protocol::common::Color4& keyframe_control_color() const;
  inline ::protocol::common::Color4* mutable_keyframe_control_color();
  inline ::protocol::common::Color4* release_keyframe_control_color();
  inline void set_allocated_keyframe_control_color(::protocol::common::Color4* keyframe_control_color);

  // optional .protocol.common.Color4 graph_color = 153;
  inline bool has_graph_color() const;
  inline void clear_graph_color();
  static const int kGraphColorFieldNumber = 153;
  inline const ::protocol::common::Color4& graph_color() const;
  inline ::protocol::common::Color4* mutable_graph_color();
  inline ::protocol::common::Color4* release_graph_color();
  inline void set_allocated_graph_color(::protocol::common::Color4* graph_color);

  // optional .protocol.common.Color4 var_text_color = 160;
  inline bool has_var_text_color() const;
  inline void clear_var_text_color();
  static const int kVarTextColorFieldNumber = 160;
  inline const ::protocol::common::Color4& var_text_color() const;
  inline ::protocol::common::Color4* mutable_var_text_color();
  inline ::protocol::common::Color4* release_var_text_color();
  inline void set_allocated_var_text_color(::protocol::common::Color4* var_text_color);

  // optional .protocol.common.Color4 var_value_color = 161;
  inline bool has_var_value_color() const;
  inline void clear_var_value_color();
  static const int kVarValueColorFieldNumber = 161;
  inline const ::protocol::common::Color4& var_value_color() const;
  inline ::protocol::common::Color4* mutable_var_value_color();
  inline ::protocol::common::Color4* release_var_value_color();
  inline void set_allocated_var_value_color(::protocol::common::Color4* var_value_color);

  // optional .protocol.common.Color4 effect_icon_expanded_color = 200;
  inline bool has_effect_icon_expanded_color() const;
  inline void clear_effect_icon_expanded_color();
  static const int kEffectIconExpandedColorFieldNumber = 200;
  inline const ::protocol::common::Color4& effect_icon_expanded_color() const;
  inline ::protocol::common::Color4* mutable_effect_icon_expanded_color();
  inline ::protocol::common::Color4* release_effect_icon_expanded_color();
  inline void set_allocated_effect_icon_expanded_color(::protocol::common::Color4* effect_icon_expanded_color);

  // optional .protocol.common.Color4 effect_icon_collapsed_color = 201;
  inline bool has_effect_icon_collapsed_color() const;
  inline void clear_effect_icon_collapsed_color();
  static const int kEffectIconCollapsedColorFieldNumber = 201;
  inline const ::protocol::common::Color4& effect_icon_collapsed_color() const;
  inline ::protocol::common::Color4* mutable_effect_icon_collapsed_color();
  inline ::protocol::common::Color4* release_effect_icon_collapsed_color();
  inline void set_allocated_effect_icon_collapsed_color(::protocol::common::Color4* effect_icon_collapsed_color);

  // @@protoc_insertion_point(class_scope:protocol.editor.Settings)
 private:
  inline void set_has_ticker_height();
  inline void clear_has_ticker_height();
  inline void set_has_ticker_interval();
  inline void clear_has_ticker_interval();
  inline void set_has_ticks_per_interval();
  inline void clear_has_ticks_per_interval();
  inline void set_has_effect_view_width();
  inline void clear_has_effect_view_width();
  inline void set_has_effect_row_height();
  inline void clear_has_effect_row_height();
  inline void set_has_status_bar_height();
  inline void clear_has_status_bar_height();
  inline void set_has_effect_height();
  inline void clear_has_effect_height();
  inline void set_has_resize_handle();
  inline void clear_has_resize_handle();
  inline void set_has_timeline_zoom_min();
  inline void clear_has_timeline_zoom_min();
  inline void set_has_timeline_zoom_max();
  inline void clear_has_timeline_zoom_max();
  inline void set_has_timeline_zoom_default();
  inline void clear_has_timeline_zoom_default();
  inline void set_has_keyframe_size();
  inline void clear_has_keyframe_size();
  inline void set_has_default_row_color();
  inline void clear_has_default_row_color();
  inline void set_has_selected_row_color();
  inline void clear_has_selected_row_color();
  inline void set_has_hover_row_color();
  inline void clear_has_hover_row_color();
  inline void set_has_invalid_hover_row_color();
  inline void clear_has_invalid_hover_row_color();
  inline void set_has_default_line_color();
  inline void clear_has_default_line_color();
  inline void set_has_effect_view_background_color();
  inline void clear_has_effect_view_background_color();
  inline void set_has_effect_view_background_color_selected();
  inline void clear_has_effect_view_background_color_selected();
  inline void set_has_timeline_view_background_color();
  inline void clear_has_timeline_view_background_color();
  inline void set_has_effect_line_color();
  inline void clear_has_effect_line_color();
  inline void set_has_keyframe_default_color();
  inline void clear_has_keyframe_default_color();
  inline void set_has_keyframe_selected_color();
  inline void clear_has_keyframe_selected_color();
  inline void set_has_keyframe_control_color();
  inline void clear_has_keyframe_control_color();
  inline void set_has_graph_color();
  inline void clear_has_graph_color();
  inline void set_has_var_text_color();
  inline void clear_has_var_text_color();
  inline void set_has_var_value_color();
  inline void clear_has_var_value_color();
  inline void set_has_effect_icon_expanded_color();
  inline void clear_has_effect_icon_expanded_color();
  inline void set_has_effect_icon_collapsed_color();
  inline void clear_has_effect_icon_collapsed_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ticker_height_;
  ::google::protobuf::uint32 ticker_interval_;
  ::google::protobuf::uint32 ticks_per_interval_;
  ::google::protobuf::uint32 effect_view_width_;
  ::google::protobuf::uint32 effect_row_height_;
  ::google::protobuf::uint32 status_bar_height_;
  ::google::protobuf::uint32 effect_height_;
  ::google::protobuf::uint32 resize_handle_;
  ::google::protobuf::uint32 timeline_zoom_min_;
  ::google::protobuf::uint32 timeline_zoom_max_;
  ::google::protobuf::uint32 timeline_zoom_default_;
  ::google::protobuf::uint32 keyframe_size_;
  ::protocol::common::Color4* default_row_color_;
  ::protocol::common::Color4* selected_row_color_;
  ::protocol::common::Color4* hover_row_color_;
  ::protocol::common::Color4* invalid_hover_row_color_;
  ::protocol::common::Color4* default_line_color_;
  ::protocol::common::Color4* effect_view_background_color_;
  ::protocol::common::Color4* effect_view_background_color_selected_;
  ::protocol::common::Color4* timeline_view_background_color_;
  ::protocol::common::Color4* effect_line_color_;
  ::protocol::common::Color4* keyframe_default_color_;
  ::protocol::common::Color4* keyframe_selected_color_;
  ::protocol::common::Color4* keyframe_control_color_;
  ::protocol::common::Color4* graph_color_;
  ::protocol::common::Color4* var_text_color_;
  ::protocol::common::Color4* var_value_color_;
  ::protocol::common::Color4* effect_icon_expanded_color_;
  ::protocol::common::Color4* effect_icon_collapsed_color_;
  friend void  protobuf_AddDesc_editor_5fsettings_2eproto();
  friend void protobuf_AssignDesc_editor_5fsettings_2eproto();
  friend void protobuf_ShutdownFile_editor_5fsettings_2eproto();

  void InitAsDefaultInstance();
  static Settings* default_instance_;
};
// ===================================================================


// ===================================================================

// Settings

// optional uint32 ticker_height = 1 [default = 50];
inline bool Settings::has_ticker_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::set_has_ticker_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settings::clear_has_ticker_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settings::clear_ticker_height() {
  ticker_height_ = 50u;
  clear_has_ticker_height();
}
inline ::google::protobuf::uint32 Settings::ticker_height() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.ticker_height)
  return ticker_height_;
}
inline void Settings::set_ticker_height(::google::protobuf::uint32 value) {
  set_has_ticker_height();
  ticker_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.ticker_height)
}

// optional uint32 ticker_interval = 2 [default = 20];
inline bool Settings::has_ticker_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settings::set_has_ticker_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settings::clear_has_ticker_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settings::clear_ticker_interval() {
  ticker_interval_ = 20u;
  clear_has_ticker_interval();
}
inline ::google::protobuf::uint32 Settings::ticker_interval() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.ticker_interval)
  return ticker_interval_;
}
inline void Settings::set_ticker_interval(::google::protobuf::uint32 value) {
  set_has_ticker_interval();
  ticker_interval_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.ticker_interval)
}

// optional uint32 ticks_per_interval = 3 [default = 4];
inline bool Settings::has_ticks_per_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settings::set_has_ticks_per_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settings::clear_has_ticks_per_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settings::clear_ticks_per_interval() {
  ticks_per_interval_ = 4u;
  clear_has_ticks_per_interval();
}
inline ::google::protobuf::uint32 Settings::ticks_per_interval() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.ticks_per_interval)
  return ticks_per_interval_;
}
inline void Settings::set_ticks_per_interval(::google::protobuf::uint32 value) {
  set_has_ticks_per_interval();
  ticks_per_interval_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.ticks_per_interval)
}

// optional uint32 effect_view_width = 20 [default = 200];
inline bool Settings::has_effect_view_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settings::set_has_effect_view_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Settings::clear_has_effect_view_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Settings::clear_effect_view_width() {
  effect_view_width_ = 200u;
  clear_has_effect_view_width();
}
inline ::google::protobuf::uint32 Settings::effect_view_width() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_view_width)
  return effect_view_width_;
}
inline void Settings::set_effect_view_width(::google::protobuf::uint32 value) {
  set_has_effect_view_width();
  effect_view_width_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.effect_view_width)
}

// optional uint32 effect_row_height = 21 [default = 20];
inline bool Settings::has_effect_row_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Settings::set_has_effect_row_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Settings::clear_has_effect_row_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Settings::clear_effect_row_height() {
  effect_row_height_ = 20u;
  clear_has_effect_row_height();
}
inline ::google::protobuf::uint32 Settings::effect_row_height() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_row_height)
  return effect_row_height_;
}
inline void Settings::set_effect_row_height(::google::protobuf::uint32 value) {
  set_has_effect_row_height();
  effect_row_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.effect_row_height)
}

// optional uint32 status_bar_height = 22 [default = 30];
inline bool Settings::has_status_bar_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Settings::set_has_status_bar_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Settings::clear_has_status_bar_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Settings::clear_status_bar_height() {
  status_bar_height_ = 30u;
  clear_has_status_bar_height();
}
inline ::google::protobuf::uint32 Settings::status_bar_height() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.status_bar_height)
  return status_bar_height_;
}
inline void Settings::set_status_bar_height(::google::protobuf::uint32 value) {
  set_has_status_bar_height();
  status_bar_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.status_bar_height)
}

// optional uint32 effect_height = 30 [default = 40];
inline bool Settings::has_effect_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Settings::set_has_effect_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Settings::clear_has_effect_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Settings::clear_effect_height() {
  effect_height_ = 40u;
  clear_has_effect_height();
}
inline ::google::protobuf::uint32 Settings::effect_height() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_height)
  return effect_height_;
}
inline void Settings::set_effect_height(::google::protobuf::uint32 value) {
  set_has_effect_height();
  effect_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.effect_height)
}

// optional uint32 resize_handle = 31 [default = 6];
inline bool Settings::has_resize_handle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Settings::set_has_resize_handle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Settings::clear_has_resize_handle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Settings::clear_resize_handle() {
  resize_handle_ = 6u;
  clear_has_resize_handle();
}
inline ::google::protobuf::uint32 Settings::resize_handle() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.resize_handle)
  return resize_handle_;
}
inline void Settings::set_resize_handle(::google::protobuf::uint32 value) {
  set_has_resize_handle();
  resize_handle_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.resize_handle)
}

// optional uint32 timeline_zoom_min = 40 [default = 16];
inline bool Settings::has_timeline_zoom_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Settings::set_has_timeline_zoom_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Settings::clear_has_timeline_zoom_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Settings::clear_timeline_zoom_min() {
  timeline_zoom_min_ = 16u;
  clear_has_timeline_zoom_min();
}
inline ::google::protobuf::uint32 Settings::timeline_zoom_min() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.timeline_zoom_min)
  return timeline_zoom_min_;
}
inline void Settings::set_timeline_zoom_min(::google::protobuf::uint32 value) {
  set_has_timeline_zoom_min();
  timeline_zoom_min_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.timeline_zoom_min)
}

// optional uint32 timeline_zoom_max = 41 [default = 1024];
inline bool Settings::has_timeline_zoom_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Settings::set_has_timeline_zoom_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Settings::clear_has_timeline_zoom_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Settings::clear_timeline_zoom_max() {
  timeline_zoom_max_ = 1024u;
  clear_has_timeline_zoom_max();
}
inline ::google::protobuf::uint32 Settings::timeline_zoom_max() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.timeline_zoom_max)
  return timeline_zoom_max_;
}
inline void Settings::set_timeline_zoom_max(::google::protobuf::uint32 value) {
  set_has_timeline_zoom_max();
  timeline_zoom_max_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.timeline_zoom_max)
}

// optional uint32 timeline_zoom_default = 42 [default = 128];
inline bool Settings::has_timeline_zoom_default() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Settings::set_has_timeline_zoom_default() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Settings::clear_has_timeline_zoom_default() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Settings::clear_timeline_zoom_default() {
  timeline_zoom_default_ = 128u;
  clear_has_timeline_zoom_default();
}
inline ::google::protobuf::uint32 Settings::timeline_zoom_default() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.timeline_zoom_default)
  return timeline_zoom_default_;
}
inline void Settings::set_timeline_zoom_default(::google::protobuf::uint32 value) {
  set_has_timeline_zoom_default();
  timeline_zoom_default_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.timeline_zoom_default)
}

// optional uint32 keyframe_size = 50 [default = 5];
inline bool Settings::has_keyframe_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Settings::set_has_keyframe_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Settings::clear_has_keyframe_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Settings::clear_keyframe_size() {
  keyframe_size_ = 5u;
  clear_has_keyframe_size();
}
inline ::google::protobuf::uint32 Settings::keyframe_size() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.keyframe_size)
  return keyframe_size_;
}
inline void Settings::set_keyframe_size(::google::protobuf::uint32 value) {
  set_has_keyframe_size();
  keyframe_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.editor.Settings.keyframe_size)
}

// optional .protocol.common.Color4 default_row_color = 100;
inline bool Settings::has_default_row_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Settings::set_has_default_row_color() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Settings::clear_has_default_row_color() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Settings::clear_default_row_color() {
  if (default_row_color_ != NULL) default_row_color_->::protocol::common::Color4::Clear();
  clear_has_default_row_color();
}
inline const ::protocol::common::Color4& Settings::default_row_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.default_row_color)
  return default_row_color_ != NULL ? *default_row_color_ : *default_instance_->default_row_color_;
}
inline ::protocol::common::Color4* Settings::mutable_default_row_color() {
  set_has_default_row_color();
  if (default_row_color_ == NULL) default_row_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.default_row_color)
  return default_row_color_;
}
inline ::protocol::common::Color4* Settings::release_default_row_color() {
  clear_has_default_row_color();
  ::protocol::common::Color4* temp = default_row_color_;
  default_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_default_row_color(::protocol::common::Color4* default_row_color) {
  delete default_row_color_;
  default_row_color_ = default_row_color;
  if (default_row_color) {
    set_has_default_row_color();
  } else {
    clear_has_default_row_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.default_row_color)
}

// optional .protocol.common.Color4 selected_row_color = 101;
inline bool Settings::has_selected_row_color() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Settings::set_has_selected_row_color() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Settings::clear_has_selected_row_color() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Settings::clear_selected_row_color() {
  if (selected_row_color_ != NULL) selected_row_color_->::protocol::common::Color4::Clear();
  clear_has_selected_row_color();
}
inline const ::protocol::common::Color4& Settings::selected_row_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.selected_row_color)
  return selected_row_color_ != NULL ? *selected_row_color_ : *default_instance_->selected_row_color_;
}
inline ::protocol::common::Color4* Settings::mutable_selected_row_color() {
  set_has_selected_row_color();
  if (selected_row_color_ == NULL) selected_row_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.selected_row_color)
  return selected_row_color_;
}
inline ::protocol::common::Color4* Settings::release_selected_row_color() {
  clear_has_selected_row_color();
  ::protocol::common::Color4* temp = selected_row_color_;
  selected_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_selected_row_color(::protocol::common::Color4* selected_row_color) {
  delete selected_row_color_;
  selected_row_color_ = selected_row_color;
  if (selected_row_color) {
    set_has_selected_row_color();
  } else {
    clear_has_selected_row_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.selected_row_color)
}

// optional .protocol.common.Color4 hover_row_color = 102;
inline bool Settings::has_hover_row_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Settings::set_has_hover_row_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Settings::clear_has_hover_row_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Settings::clear_hover_row_color() {
  if (hover_row_color_ != NULL) hover_row_color_->::protocol::common::Color4::Clear();
  clear_has_hover_row_color();
}
inline const ::protocol::common::Color4& Settings::hover_row_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.hover_row_color)
  return hover_row_color_ != NULL ? *hover_row_color_ : *default_instance_->hover_row_color_;
}
inline ::protocol::common::Color4* Settings::mutable_hover_row_color() {
  set_has_hover_row_color();
  if (hover_row_color_ == NULL) hover_row_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.hover_row_color)
  return hover_row_color_;
}
inline ::protocol::common::Color4* Settings::release_hover_row_color() {
  clear_has_hover_row_color();
  ::protocol::common::Color4* temp = hover_row_color_;
  hover_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_hover_row_color(::protocol::common::Color4* hover_row_color) {
  delete hover_row_color_;
  hover_row_color_ = hover_row_color;
  if (hover_row_color) {
    set_has_hover_row_color();
  } else {
    clear_has_hover_row_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.hover_row_color)
}

// optional .protocol.common.Color4 invalid_hover_row_color = 103;
inline bool Settings::has_invalid_hover_row_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Settings::set_has_invalid_hover_row_color() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Settings::clear_has_invalid_hover_row_color() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Settings::clear_invalid_hover_row_color() {
  if (invalid_hover_row_color_ != NULL) invalid_hover_row_color_->::protocol::common::Color4::Clear();
  clear_has_invalid_hover_row_color();
}
inline const ::protocol::common::Color4& Settings::invalid_hover_row_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.invalid_hover_row_color)
  return invalid_hover_row_color_ != NULL ? *invalid_hover_row_color_ : *default_instance_->invalid_hover_row_color_;
}
inline ::protocol::common::Color4* Settings::mutable_invalid_hover_row_color() {
  set_has_invalid_hover_row_color();
  if (invalid_hover_row_color_ == NULL) invalid_hover_row_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.invalid_hover_row_color)
  return invalid_hover_row_color_;
}
inline ::protocol::common::Color4* Settings::release_invalid_hover_row_color() {
  clear_has_invalid_hover_row_color();
  ::protocol::common::Color4* temp = invalid_hover_row_color_;
  invalid_hover_row_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_invalid_hover_row_color(::protocol::common::Color4* invalid_hover_row_color) {
  delete invalid_hover_row_color_;
  invalid_hover_row_color_ = invalid_hover_row_color;
  if (invalid_hover_row_color) {
    set_has_invalid_hover_row_color();
  } else {
    clear_has_invalid_hover_row_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.invalid_hover_row_color)
}

// optional .protocol.common.Color4 default_line_color = 104;
inline bool Settings::has_default_line_color() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Settings::set_has_default_line_color() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Settings::clear_has_default_line_color() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Settings::clear_default_line_color() {
  if (default_line_color_ != NULL) default_line_color_->::protocol::common::Color4::Clear();
  clear_has_default_line_color();
}
inline const ::protocol::common::Color4& Settings::default_line_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.default_line_color)
  return default_line_color_ != NULL ? *default_line_color_ : *default_instance_->default_line_color_;
}
inline ::protocol::common::Color4* Settings::mutable_default_line_color() {
  set_has_default_line_color();
  if (default_line_color_ == NULL) default_line_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.default_line_color)
  return default_line_color_;
}
inline ::protocol::common::Color4* Settings::release_default_line_color() {
  clear_has_default_line_color();
  ::protocol::common::Color4* temp = default_line_color_;
  default_line_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_default_line_color(::protocol::common::Color4* default_line_color) {
  delete default_line_color_;
  default_line_color_ = default_line_color;
  if (default_line_color) {
    set_has_default_line_color();
  } else {
    clear_has_default_line_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.default_line_color)
}

// optional .protocol.common.Color4 effect_view_background_color = 130;
inline bool Settings::has_effect_view_background_color() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Settings::set_has_effect_view_background_color() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Settings::clear_has_effect_view_background_color() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Settings::clear_effect_view_background_color() {
  if (effect_view_background_color_ != NULL) effect_view_background_color_->::protocol::common::Color4::Clear();
  clear_has_effect_view_background_color();
}
inline const ::protocol::common::Color4& Settings::effect_view_background_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_view_background_color)
  return effect_view_background_color_ != NULL ? *effect_view_background_color_ : *default_instance_->effect_view_background_color_;
}
inline ::protocol::common::Color4* Settings::mutable_effect_view_background_color() {
  set_has_effect_view_background_color();
  if (effect_view_background_color_ == NULL) effect_view_background_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.effect_view_background_color)
  return effect_view_background_color_;
}
inline ::protocol::common::Color4* Settings::release_effect_view_background_color() {
  clear_has_effect_view_background_color();
  ::protocol::common::Color4* temp = effect_view_background_color_;
  effect_view_background_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_effect_view_background_color(::protocol::common::Color4* effect_view_background_color) {
  delete effect_view_background_color_;
  effect_view_background_color_ = effect_view_background_color;
  if (effect_view_background_color) {
    set_has_effect_view_background_color();
  } else {
    clear_has_effect_view_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.effect_view_background_color)
}

// optional .protocol.common.Color4 effect_view_background_color_selected = 131;
inline bool Settings::has_effect_view_background_color_selected() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Settings::set_has_effect_view_background_color_selected() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Settings::clear_has_effect_view_background_color_selected() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Settings::clear_effect_view_background_color_selected() {
  if (effect_view_background_color_selected_ != NULL) effect_view_background_color_selected_->::protocol::common::Color4::Clear();
  clear_has_effect_view_background_color_selected();
}
inline const ::protocol::common::Color4& Settings::effect_view_background_color_selected() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_view_background_color_selected)
  return effect_view_background_color_selected_ != NULL ? *effect_view_background_color_selected_ : *default_instance_->effect_view_background_color_selected_;
}
inline ::protocol::common::Color4* Settings::mutable_effect_view_background_color_selected() {
  set_has_effect_view_background_color_selected();
  if (effect_view_background_color_selected_ == NULL) effect_view_background_color_selected_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.effect_view_background_color_selected)
  return effect_view_background_color_selected_;
}
inline ::protocol::common::Color4* Settings::release_effect_view_background_color_selected() {
  clear_has_effect_view_background_color_selected();
  ::protocol::common::Color4* temp = effect_view_background_color_selected_;
  effect_view_background_color_selected_ = NULL;
  return temp;
}
inline void Settings::set_allocated_effect_view_background_color_selected(::protocol::common::Color4* effect_view_background_color_selected) {
  delete effect_view_background_color_selected_;
  effect_view_background_color_selected_ = effect_view_background_color_selected;
  if (effect_view_background_color_selected) {
    set_has_effect_view_background_color_selected();
  } else {
    clear_has_effect_view_background_color_selected();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.effect_view_background_color_selected)
}

// optional .protocol.common.Color4 timeline_view_background_color = 132;
inline bool Settings::has_timeline_view_background_color() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Settings::set_has_timeline_view_background_color() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Settings::clear_has_timeline_view_background_color() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Settings::clear_timeline_view_background_color() {
  if (timeline_view_background_color_ != NULL) timeline_view_background_color_->::protocol::common::Color4::Clear();
  clear_has_timeline_view_background_color();
}
inline const ::protocol::common::Color4& Settings::timeline_view_background_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.timeline_view_background_color)
  return timeline_view_background_color_ != NULL ? *timeline_view_background_color_ : *default_instance_->timeline_view_background_color_;
}
inline ::protocol::common::Color4* Settings::mutable_timeline_view_background_color() {
  set_has_timeline_view_background_color();
  if (timeline_view_background_color_ == NULL) timeline_view_background_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.timeline_view_background_color)
  return timeline_view_background_color_;
}
inline ::protocol::common::Color4* Settings::release_timeline_view_background_color() {
  clear_has_timeline_view_background_color();
  ::protocol::common::Color4* temp = timeline_view_background_color_;
  timeline_view_background_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_timeline_view_background_color(::protocol::common::Color4* timeline_view_background_color) {
  delete timeline_view_background_color_;
  timeline_view_background_color_ = timeline_view_background_color;
  if (timeline_view_background_color) {
    set_has_timeline_view_background_color();
  } else {
    clear_has_timeline_view_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.timeline_view_background_color)
}

// optional .protocol.common.Color4 effect_line_color = 133;
inline bool Settings::has_effect_line_color() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Settings::set_has_effect_line_color() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Settings::clear_has_effect_line_color() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Settings::clear_effect_line_color() {
  if (effect_line_color_ != NULL) effect_line_color_->::protocol::common::Color4::Clear();
  clear_has_effect_line_color();
}
inline const ::protocol::common::Color4& Settings::effect_line_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_line_color)
  return effect_line_color_ != NULL ? *effect_line_color_ : *default_instance_->effect_line_color_;
}
inline ::protocol::common::Color4* Settings::mutable_effect_line_color() {
  set_has_effect_line_color();
  if (effect_line_color_ == NULL) effect_line_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.effect_line_color)
  return effect_line_color_;
}
inline ::protocol::common::Color4* Settings::release_effect_line_color() {
  clear_has_effect_line_color();
  ::protocol::common::Color4* temp = effect_line_color_;
  effect_line_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_effect_line_color(::protocol::common::Color4* effect_line_color) {
  delete effect_line_color_;
  effect_line_color_ = effect_line_color;
  if (effect_line_color) {
    set_has_effect_line_color();
  } else {
    clear_has_effect_line_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.effect_line_color)
}

// optional .protocol.common.Color4 keyframe_default_color = 150;
inline bool Settings::has_keyframe_default_color() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Settings::set_has_keyframe_default_color() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Settings::clear_has_keyframe_default_color() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Settings::clear_keyframe_default_color() {
  if (keyframe_default_color_ != NULL) keyframe_default_color_->::protocol::common::Color4::Clear();
  clear_has_keyframe_default_color();
}
inline const ::protocol::common::Color4& Settings::keyframe_default_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.keyframe_default_color)
  return keyframe_default_color_ != NULL ? *keyframe_default_color_ : *default_instance_->keyframe_default_color_;
}
inline ::protocol::common::Color4* Settings::mutable_keyframe_default_color() {
  set_has_keyframe_default_color();
  if (keyframe_default_color_ == NULL) keyframe_default_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.keyframe_default_color)
  return keyframe_default_color_;
}
inline ::protocol::common::Color4* Settings::release_keyframe_default_color() {
  clear_has_keyframe_default_color();
  ::protocol::common::Color4* temp = keyframe_default_color_;
  keyframe_default_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_keyframe_default_color(::protocol::common::Color4* keyframe_default_color) {
  delete keyframe_default_color_;
  keyframe_default_color_ = keyframe_default_color;
  if (keyframe_default_color) {
    set_has_keyframe_default_color();
  } else {
    clear_has_keyframe_default_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.keyframe_default_color)
}

// optional .protocol.common.Color4 keyframe_selected_color = 151;
inline bool Settings::has_keyframe_selected_color() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Settings::set_has_keyframe_selected_color() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Settings::clear_has_keyframe_selected_color() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Settings::clear_keyframe_selected_color() {
  if (keyframe_selected_color_ != NULL) keyframe_selected_color_->::protocol::common::Color4::Clear();
  clear_has_keyframe_selected_color();
}
inline const ::protocol::common::Color4& Settings::keyframe_selected_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.keyframe_selected_color)
  return keyframe_selected_color_ != NULL ? *keyframe_selected_color_ : *default_instance_->keyframe_selected_color_;
}
inline ::protocol::common::Color4* Settings::mutable_keyframe_selected_color() {
  set_has_keyframe_selected_color();
  if (keyframe_selected_color_ == NULL) keyframe_selected_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.keyframe_selected_color)
  return keyframe_selected_color_;
}
inline ::protocol::common::Color4* Settings::release_keyframe_selected_color() {
  clear_has_keyframe_selected_color();
  ::protocol::common::Color4* temp = keyframe_selected_color_;
  keyframe_selected_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_keyframe_selected_color(::protocol::common::Color4* keyframe_selected_color) {
  delete keyframe_selected_color_;
  keyframe_selected_color_ = keyframe_selected_color;
  if (keyframe_selected_color) {
    set_has_keyframe_selected_color();
  } else {
    clear_has_keyframe_selected_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.keyframe_selected_color)
}

// optional .protocol.common.Color4 keyframe_control_color = 152;
inline bool Settings::has_keyframe_control_color() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Settings::set_has_keyframe_control_color() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Settings::clear_has_keyframe_control_color() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Settings::clear_keyframe_control_color() {
  if (keyframe_control_color_ != NULL) keyframe_control_color_->::protocol::common::Color4::Clear();
  clear_has_keyframe_control_color();
}
inline const ::protocol::common::Color4& Settings::keyframe_control_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.keyframe_control_color)
  return keyframe_control_color_ != NULL ? *keyframe_control_color_ : *default_instance_->keyframe_control_color_;
}
inline ::protocol::common::Color4* Settings::mutable_keyframe_control_color() {
  set_has_keyframe_control_color();
  if (keyframe_control_color_ == NULL) keyframe_control_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.keyframe_control_color)
  return keyframe_control_color_;
}
inline ::protocol::common::Color4* Settings::release_keyframe_control_color() {
  clear_has_keyframe_control_color();
  ::protocol::common::Color4* temp = keyframe_control_color_;
  keyframe_control_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_keyframe_control_color(::protocol::common::Color4* keyframe_control_color) {
  delete keyframe_control_color_;
  keyframe_control_color_ = keyframe_control_color;
  if (keyframe_control_color) {
    set_has_keyframe_control_color();
  } else {
    clear_has_keyframe_control_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.keyframe_control_color)
}

// optional .protocol.common.Color4 graph_color = 153;
inline bool Settings::has_graph_color() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Settings::set_has_graph_color() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Settings::clear_has_graph_color() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Settings::clear_graph_color() {
  if (graph_color_ != NULL) graph_color_->::protocol::common::Color4::Clear();
  clear_has_graph_color();
}
inline const ::protocol::common::Color4& Settings::graph_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.graph_color)
  return graph_color_ != NULL ? *graph_color_ : *default_instance_->graph_color_;
}
inline ::protocol::common::Color4* Settings::mutable_graph_color() {
  set_has_graph_color();
  if (graph_color_ == NULL) graph_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.graph_color)
  return graph_color_;
}
inline ::protocol::common::Color4* Settings::release_graph_color() {
  clear_has_graph_color();
  ::protocol::common::Color4* temp = graph_color_;
  graph_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_graph_color(::protocol::common::Color4* graph_color) {
  delete graph_color_;
  graph_color_ = graph_color;
  if (graph_color) {
    set_has_graph_color();
  } else {
    clear_has_graph_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.graph_color)
}

// optional .protocol.common.Color4 var_text_color = 160;
inline bool Settings::has_var_text_color() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Settings::set_has_var_text_color() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Settings::clear_has_var_text_color() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Settings::clear_var_text_color() {
  if (var_text_color_ != NULL) var_text_color_->::protocol::common::Color4::Clear();
  clear_has_var_text_color();
}
inline const ::protocol::common::Color4& Settings::var_text_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.var_text_color)
  return var_text_color_ != NULL ? *var_text_color_ : *default_instance_->var_text_color_;
}
inline ::protocol::common::Color4* Settings::mutable_var_text_color() {
  set_has_var_text_color();
  if (var_text_color_ == NULL) var_text_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.var_text_color)
  return var_text_color_;
}
inline ::protocol::common::Color4* Settings::release_var_text_color() {
  clear_has_var_text_color();
  ::protocol::common::Color4* temp = var_text_color_;
  var_text_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_var_text_color(::protocol::common::Color4* var_text_color) {
  delete var_text_color_;
  var_text_color_ = var_text_color;
  if (var_text_color) {
    set_has_var_text_color();
  } else {
    clear_has_var_text_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.var_text_color)
}

// optional .protocol.common.Color4 var_value_color = 161;
inline bool Settings::has_var_value_color() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Settings::set_has_var_value_color() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Settings::clear_has_var_value_color() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Settings::clear_var_value_color() {
  if (var_value_color_ != NULL) var_value_color_->::protocol::common::Color4::Clear();
  clear_has_var_value_color();
}
inline const ::protocol::common::Color4& Settings::var_value_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.var_value_color)
  return var_value_color_ != NULL ? *var_value_color_ : *default_instance_->var_value_color_;
}
inline ::protocol::common::Color4* Settings::mutable_var_value_color() {
  set_has_var_value_color();
  if (var_value_color_ == NULL) var_value_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.var_value_color)
  return var_value_color_;
}
inline ::protocol::common::Color4* Settings::release_var_value_color() {
  clear_has_var_value_color();
  ::protocol::common::Color4* temp = var_value_color_;
  var_value_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_var_value_color(::protocol::common::Color4* var_value_color) {
  delete var_value_color_;
  var_value_color_ = var_value_color;
  if (var_value_color) {
    set_has_var_value_color();
  } else {
    clear_has_var_value_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.var_value_color)
}

// optional .protocol.common.Color4 effect_icon_expanded_color = 200;
inline bool Settings::has_effect_icon_expanded_color() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Settings::set_has_effect_icon_expanded_color() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Settings::clear_has_effect_icon_expanded_color() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Settings::clear_effect_icon_expanded_color() {
  if (effect_icon_expanded_color_ != NULL) effect_icon_expanded_color_->::protocol::common::Color4::Clear();
  clear_has_effect_icon_expanded_color();
}
inline const ::protocol::common::Color4& Settings::effect_icon_expanded_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_icon_expanded_color)
  return effect_icon_expanded_color_ != NULL ? *effect_icon_expanded_color_ : *default_instance_->effect_icon_expanded_color_;
}
inline ::protocol::common::Color4* Settings::mutable_effect_icon_expanded_color() {
  set_has_effect_icon_expanded_color();
  if (effect_icon_expanded_color_ == NULL) effect_icon_expanded_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.effect_icon_expanded_color)
  return effect_icon_expanded_color_;
}
inline ::protocol::common::Color4* Settings::release_effect_icon_expanded_color() {
  clear_has_effect_icon_expanded_color();
  ::protocol::common::Color4* temp = effect_icon_expanded_color_;
  effect_icon_expanded_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_effect_icon_expanded_color(::protocol::common::Color4* effect_icon_expanded_color) {
  delete effect_icon_expanded_color_;
  effect_icon_expanded_color_ = effect_icon_expanded_color;
  if (effect_icon_expanded_color) {
    set_has_effect_icon_expanded_color();
  } else {
    clear_has_effect_icon_expanded_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.effect_icon_expanded_color)
}

// optional .protocol.common.Color4 effect_icon_collapsed_color = 201;
inline bool Settings::has_effect_icon_collapsed_color() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Settings::set_has_effect_icon_collapsed_color() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Settings::clear_has_effect_icon_collapsed_color() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Settings::clear_effect_icon_collapsed_color() {
  if (effect_icon_collapsed_color_ != NULL) effect_icon_collapsed_color_->::protocol::common::Color4::Clear();
  clear_has_effect_icon_collapsed_color();
}
inline const ::protocol::common::Color4& Settings::effect_icon_collapsed_color() const {
  // @@protoc_insertion_point(field_get:protocol.editor.Settings.effect_icon_collapsed_color)
  return effect_icon_collapsed_color_ != NULL ? *effect_icon_collapsed_color_ : *default_instance_->effect_icon_collapsed_color_;
}
inline ::protocol::common::Color4* Settings::mutable_effect_icon_collapsed_color() {
  set_has_effect_icon_collapsed_color();
  if (effect_icon_collapsed_color_ == NULL) effect_icon_collapsed_color_ = new ::protocol::common::Color4;
  // @@protoc_insertion_point(field_mutable:protocol.editor.Settings.effect_icon_collapsed_color)
  return effect_icon_collapsed_color_;
}
inline ::protocol::common::Color4* Settings::release_effect_icon_collapsed_color() {
  clear_has_effect_icon_collapsed_color();
  ::protocol::common::Color4* temp = effect_icon_collapsed_color_;
  effect_icon_collapsed_color_ = NULL;
  return temp;
}
inline void Settings::set_allocated_effect_icon_collapsed_color(::protocol::common::Color4* effect_icon_collapsed_color) {
  delete effect_icon_collapsed_color_;
  effect_icon_collapsed_color_ = effect_icon_collapsed_color;
  if (effect_icon_collapsed_color) {
    set_has_effect_icon_collapsed_color();
  } else {
    clear_has_effect_icon_collapsed_color();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.editor.Settings.effect_icon_collapsed_color)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace editor
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_editor_5fsettings_2eproto__INCLUDED
