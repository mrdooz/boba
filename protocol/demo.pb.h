// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_demo_2eproto__INCLUDED
#define PROTOBUF_demo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace demo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_demo_2eproto();
void protobuf_AssignDesc_demo_2eproto();
void protobuf_ShutdownFile_demo_2eproto();

class Part;
class Config;

// ===================================================================

class Part : public ::google::protobuf::Message {
 public:
  Part();
  virtual ~Part();

  Part(const Part& from);

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Part& default_instance();

  void Swap(Part* other);

  // implements Message ----------------------------------------------

  Part* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Part& from);
  void MergeFrom(const Part& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string effect_class = 2;
  inline bool has_effect_class() const;
  inline void clear_effect_class();
  static const int kEffectClassFieldNumber = 2;
  inline const ::std::string& effect_class() const;
  inline void set_effect_class(const ::std::string& value);
  inline void set_effect_class(const char* value);
  inline void set_effect_class(const char* value, size_t size);
  inline ::std::string* mutable_effect_class();
  inline ::std::string* release_effect_class();
  inline void set_allocated_effect_class(::std::string* effect_class);

  // optional string config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // optional uint32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional uint32 end = 5;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 5;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:demo.Part)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_effect_class();
  inline void clear_has_effect_class();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* effect_class_;
  ::std::string* config_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static Part* default_instance_;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .demo.Part part = 1;
  inline int part_size() const;
  inline void clear_part();
  static const int kPartFieldNumber = 1;
  inline const ::demo::Part& part(int index) const;
  inline ::demo::Part* mutable_part(int index);
  inline ::demo::Part* add_part();
  inline const ::google::protobuf::RepeatedPtrField< ::demo::Part >&
      part() const;
  inline ::google::protobuf::RepeatedPtrField< ::demo::Part >*
      mutable_part();

  // optional string soundtrack = 2;
  inline bool has_soundtrack() const;
  inline void clear_soundtrack();
  static const int kSoundtrackFieldNumber = 2;
  inline const ::std::string& soundtrack() const;
  inline void set_soundtrack(const ::std::string& value);
  inline void set_soundtrack(const char* value);
  inline void set_soundtrack(const char* value, size_t size);
  inline ::std::string* mutable_soundtrack();
  inline ::std::string* release_soundtrack();
  inline void set_allocated_soundtrack(::std::string* soundtrack);

  // @@protoc_insertion_point(class_scope:demo.Config)
 private:
  inline void set_has_soundtrack();
  inline void clear_has_soundtrack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::demo::Part > part_;
  ::std::string* soundtrack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Part

// optional string name = 1;
inline bool Part::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Part::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Part::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Part::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Part::name() const {
  return *name_;
}
inline void Part::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Part::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Part::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Part::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Part::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Part::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string effect_class = 2;
inline bool Part::has_effect_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Part::set_has_effect_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Part::clear_has_effect_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Part::clear_effect_class() {
  if (effect_class_ != &::google::protobuf::internal::kEmptyString) {
    effect_class_->clear();
  }
  clear_has_effect_class();
}
inline const ::std::string& Part::effect_class() const {
  return *effect_class_;
}
inline void Part::set_effect_class(const ::std::string& value) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(value);
}
inline void Part::set_effect_class(const char* value) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(value);
}
inline void Part::set_effect_class(const char* value, size_t size) {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  effect_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Part::mutable_effect_class() {
  set_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    effect_class_ = new ::std::string;
  }
  return effect_class_;
}
inline ::std::string* Part::release_effect_class() {
  clear_has_effect_class();
  if (effect_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effect_class_;
    effect_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Part::set_allocated_effect_class(::std::string* effect_class) {
  if (effect_class_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_class_;
  }
  if (effect_class) {
    set_has_effect_class();
    effect_class_ = effect_class;
  } else {
    clear_has_effect_class();
    effect_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string config = 3;
inline bool Part::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Part::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Part::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Part::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& Part::config() const {
  return *config_;
}
inline void Part::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void Part::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void Part::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Part::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* Part::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Part::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 start = 4;
inline bool Part::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Part::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Part::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Part::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 Part::start() const {
  return start_;
}
inline void Part::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 end = 5;
inline bool Part::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Part::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Part::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Part::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 Part::end() const {
  return end_;
}
inline void Part::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// Config

// repeated .demo.Part part = 1;
inline int Config::part_size() const {
  return part_.size();
}
inline void Config::clear_part() {
  part_.Clear();
}
inline const ::demo::Part& Config::part(int index) const {
  return part_.Get(index);
}
inline ::demo::Part* Config::mutable_part(int index) {
  return part_.Mutable(index);
}
inline ::demo::Part* Config::add_part() {
  return part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demo::Part >&
Config::part() const {
  return part_;
}
inline ::google::protobuf::RepeatedPtrField< ::demo::Part >*
Config::mutable_part() {
  return &part_;
}

// optional string soundtrack = 2;
inline bool Config::has_soundtrack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_soundtrack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_soundtrack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_soundtrack() {
  if (soundtrack_ != &::google::protobuf::internal::kEmptyString) {
    soundtrack_->clear();
  }
  clear_has_soundtrack();
}
inline const ::std::string& Config::soundtrack() const {
  return *soundtrack_;
}
inline void Config::set_soundtrack(const ::std::string& value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
}
inline void Config::set_soundtrack(const char* value) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(value);
}
inline void Config::set_soundtrack(const char* value, size_t size) {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  soundtrack_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_soundtrack() {
  set_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    soundtrack_ = new ::std::string;
  }
  return soundtrack_;
}
inline ::std::string* Config::release_soundtrack() {
  clear_has_soundtrack();
  if (soundtrack_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soundtrack_;
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_soundtrack(::std::string* soundtrack) {
  if (soundtrack_ != &::google::protobuf::internal::kEmptyString) {
    delete soundtrack_;
  }
  if (soundtrack) {
    set_has_soundtrack();
    soundtrack_ = soundtrack;
  } else {
    clear_has_soundtrack();
    soundtrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_demo_2eproto__INCLUDED
